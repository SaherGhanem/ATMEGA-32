
LCD-v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b18  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00800060  00001b18  00001b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000150c  00000000  00000000  00001d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000de4  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000197  00000000  00000000  00004164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b11  00000000  00000000  000042fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ebc  00000000  00000000  00005e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e5b  00000000  00000000  00006cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b1  00000000  00000000  00007c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000836  00000000  00000000  00007f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000876b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c4 0b 	call	0x1788	; 0x1788 <main>
      7a:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 11 03 	call	0x622	; 0x622 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 41 03 	call	0x682	; 0x682 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 41 03 	call	0x682	; 0x682 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__>

00000622 <__gesf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gesf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gesf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gesf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__epilogue_restores__+0x18>

00000682 <__fixsfsi>:
     682:	ac e0       	ldi	r26, 0x0C	; 12
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__prologue_saves__+0x20>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	be 01       	movw	r22, r28
     69c:	6b 5f       	subi	r22, 0xFB	; 251
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     6a4:	8d 81       	ldd	r24, Y+5	; 0x05
     6a6:	82 30       	cpi	r24, 0x02	; 2
     6a8:	61 f1       	breq	.+88     	; 0x702 <__fixsfsi+0x80>
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	50 f1       	brcs	.+84     	; 0x702 <__fixsfsi+0x80>
     6ae:	84 30       	cpi	r24, 0x04	; 4
     6b0:	21 f4       	brne	.+8      	; 0x6ba <__fixsfsi+0x38>
     6b2:	8e 81       	ldd	r24, Y+6	; 0x06
     6b4:	88 23       	and	r24, r24
     6b6:	51 f1       	breq	.+84     	; 0x70c <__fixsfsi+0x8a>
     6b8:	2e c0       	rjmp	.+92     	; 0x716 <__fixsfsi+0x94>
     6ba:	2f 81       	ldd	r18, Y+7	; 0x07
     6bc:	38 85       	ldd	r19, Y+8	; 0x08
     6be:	37 fd       	sbrc	r19, 7
     6c0:	20 c0       	rjmp	.+64     	; 0x702 <__fixsfsi+0x80>
     6c2:	6e 81       	ldd	r22, Y+6	; 0x06
     6c4:	2f 31       	cpi	r18, 0x1F	; 31
     6c6:	31 05       	cpc	r19, r1
     6c8:	1c f0       	brlt	.+6      	; 0x6d0 <__fixsfsi+0x4e>
     6ca:	66 23       	and	r22, r22
     6cc:	f9 f0       	breq	.+62     	; 0x70c <__fixsfsi+0x8a>
     6ce:	23 c0       	rjmp	.+70     	; 0x716 <__fixsfsi+0x94>
     6d0:	8e e1       	ldi	r24, 0x1E	; 30
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	82 1b       	sub	r24, r18
     6d6:	93 0b       	sbc	r25, r19
     6d8:	29 85       	ldd	r18, Y+9	; 0x09
     6da:	3a 85       	ldd	r19, Y+10	; 0x0a
     6dc:	4b 85       	ldd	r20, Y+11	; 0x0b
     6de:	5c 85       	ldd	r21, Y+12	; 0x0c
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <__fixsfsi+0x68>
     6e2:	56 95       	lsr	r21
     6e4:	47 95       	ror	r20
     6e6:	37 95       	ror	r19
     6e8:	27 95       	ror	r18
     6ea:	8a 95       	dec	r24
     6ec:	d2 f7       	brpl	.-12     	; 0x6e2 <__fixsfsi+0x60>
     6ee:	66 23       	and	r22, r22
     6f0:	b1 f0       	breq	.+44     	; 0x71e <__fixsfsi+0x9c>
     6f2:	50 95       	com	r21
     6f4:	40 95       	com	r20
     6f6:	30 95       	com	r19
     6f8:	21 95       	neg	r18
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	4f 4f       	sbci	r20, 0xFF	; 255
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	0e c0       	rjmp	.+28     	; 0x71e <__fixsfsi+0x9c>
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	09 c0       	rjmp	.+18     	; 0x71e <__fixsfsi+0x9c>
     70c:	2f ef       	ldi	r18, 0xFF	; 255
     70e:	3f ef       	ldi	r19, 0xFF	; 255
     710:	4f ef       	ldi	r20, 0xFF	; 255
     712:	5f e7       	ldi	r21, 0x7F	; 127
     714:	04 c0       	rjmp	.+8      	; 0x71e <__fixsfsi+0x9c>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e8       	ldi	r21, 0x80	; 128
     71e:	b9 01       	movw	r22, r18
     720:	ca 01       	movw	r24, r20
     722:	2c 96       	adiw	r28, 0x0c	; 12
     724:	e2 e0       	ldi	r30, 0x02	; 2
     726:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__epilogue_restores__+0x20>

0000072a <__floatunsisf>:
     72a:	a8 e0       	ldi	r26, 0x08	; 8
     72c:	b0 e0       	ldi	r27, 0x00	; 0
     72e:	eb e9       	ldi	r30, 0x9B	; 155
     730:	f3 e0       	ldi	r31, 0x03	; 3
     732:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x10>
     736:	7b 01       	movw	r14, r22
     738:	8c 01       	movw	r16, r24
     73a:	61 15       	cp	r22, r1
     73c:	71 05       	cpc	r23, r1
     73e:	81 05       	cpc	r24, r1
     740:	91 05       	cpc	r25, r1
     742:	19 f4       	brne	.+6      	; 0x74a <__floatunsisf+0x20>
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	89 83       	std	Y+1, r24	; 0x01
     748:	60 c0       	rjmp	.+192    	; 0x80a <__floatunsisf+0xe0>
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	89 83       	std	Y+1, r24	; 0x01
     74e:	8e e1       	ldi	r24, 0x1E	; 30
     750:	c8 2e       	mov	r12, r24
     752:	d1 2c       	mov	r13, r1
     754:	dc 82       	std	Y+4, r13	; 0x04
     756:	cb 82       	std	Y+3, r12	; 0x03
     758:	ed 82       	std	Y+5, r14	; 0x05
     75a:	fe 82       	std	Y+6, r15	; 0x06
     75c:	0f 83       	std	Y+7, r16	; 0x07
     75e:	18 87       	std	Y+8, r17	; 0x08
     760:	c8 01       	movw	r24, r16
     762:	b7 01       	movw	r22, r14
     764:	0e 94 0e 04 	call	0x81c	; 0x81c <__clzsi2>
     768:	fc 01       	movw	r30, r24
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	f7 ff       	sbrs	r31, 7
     76e:	3b c0       	rjmp	.+118    	; 0x7e6 <__floatunsisf+0xbc>
     770:	22 27       	eor	r18, r18
     772:	33 27       	eor	r19, r19
     774:	2e 1b       	sub	r18, r30
     776:	3f 0b       	sbc	r19, r31
     778:	57 01       	movw	r10, r14
     77a:	68 01       	movw	r12, r16
     77c:	02 2e       	mov	r0, r18
     77e:	04 c0       	rjmp	.+8      	; 0x788 <__floatunsisf+0x5e>
     780:	d6 94       	lsr	r13
     782:	c7 94       	ror	r12
     784:	b7 94       	ror	r11
     786:	a7 94       	ror	r10
     788:	0a 94       	dec	r0
     78a:	d2 f7       	brpl	.-12     	; 0x780 <__floatunsisf+0x56>
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	a0 e0       	ldi	r26, 0x00	; 0
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <__floatunsisf+0x7c>
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	aa 1f       	adc	r26, r26
     7a4:	bb 1f       	adc	r27, r27
     7a6:	2a 95       	dec	r18
     7a8:	d2 f7       	brpl	.-12     	; 0x79e <__floatunsisf+0x74>
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	a1 09       	sbc	r26, r1
     7ae:	b1 09       	sbc	r27, r1
     7b0:	8e 21       	and	r24, r14
     7b2:	9f 21       	and	r25, r15
     7b4:	a0 23       	and	r26, r16
     7b6:	b1 23       	and	r27, r17
     7b8:	00 97       	sbiw	r24, 0x00	; 0
     7ba:	a1 05       	cpc	r26, r1
     7bc:	b1 05       	cpc	r27, r1
     7be:	21 f0       	breq	.+8      	; 0x7c8 <__floatunsisf+0x9e>
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	4a 29       	or	r20, r10
     7ca:	5b 29       	or	r21, r11
     7cc:	6c 29       	or	r22, r12
     7ce:	7d 29       	or	r23, r13
     7d0:	4d 83       	std	Y+5, r20	; 0x05
     7d2:	5e 83       	std	Y+6, r21	; 0x06
     7d4:	6f 83       	std	Y+7, r22	; 0x07
     7d6:	78 87       	std	Y+8, r23	; 0x08
     7d8:	8e e1       	ldi	r24, 0x1E	; 30
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	8e 1b       	sub	r24, r30
     7de:	9f 0b       	sbc	r25, r31
     7e0:	9c 83       	std	Y+4, r25	; 0x04
     7e2:	8b 83       	std	Y+3, r24	; 0x03
     7e4:	12 c0       	rjmp	.+36     	; 0x80a <__floatunsisf+0xe0>
     7e6:	30 97       	sbiw	r30, 0x00	; 0
     7e8:	81 f0       	breq	.+32     	; 0x80a <__floatunsisf+0xe0>
     7ea:	0e 2e       	mov	r0, r30
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <__floatunsisf+0xcc>
     7ee:	ee 0c       	add	r14, r14
     7f0:	ff 1c       	adc	r15, r15
     7f2:	00 1f       	adc	r16, r16
     7f4:	11 1f       	adc	r17, r17
     7f6:	0a 94       	dec	r0
     7f8:	d2 f7       	brpl	.-12     	; 0x7ee <__floatunsisf+0xc4>
     7fa:	ed 82       	std	Y+5, r14	; 0x05
     7fc:	fe 82       	std	Y+6, r15	; 0x06
     7fe:	0f 83       	std	Y+7, r16	; 0x07
     800:	18 87       	std	Y+8, r17	; 0x08
     802:	ce 1a       	sub	r12, r30
     804:	df 0a       	sbc	r13, r31
     806:	dc 82       	std	Y+4, r13	; 0x04
     808:	cb 82       	std	Y+3, r12	; 0x03
     80a:	1a 82       	std	Y+2, r1	; 0x02
     80c:	ce 01       	movw	r24, r28
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__pack_f>
     814:	28 96       	adiw	r28, 0x08	; 8
     816:	ea e0       	ldi	r30, 0x0A	; 10
     818:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x10>

0000081c <__clzsi2>:
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	7b 01       	movw	r14, r22
     826:	8c 01       	movw	r16, r24
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	e8 16       	cp	r14, r24
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	f8 06       	cpc	r15, r24
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	08 07       	cpc	r16, r24
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	18 07       	cpc	r17, r24
     838:	88 f4       	brcc	.+34     	; 0x85c <__clzsi2+0x40>
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	e8 16       	cp	r14, r24
     83e:	f1 04       	cpc	r15, r1
     840:	01 05       	cpc	r16, r1
     842:	11 05       	cpc	r17, r1
     844:	31 f0       	breq	.+12     	; 0x852 <__clzsi2+0x36>
     846:	28 f0       	brcs	.+10     	; 0x852 <__clzsi2+0x36>
     848:	88 e0       	ldi	r24, 0x08	; 8
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	17 c0       	rjmp	.+46     	; 0x880 <__stack+0x21>
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	12 c0       	rjmp	.+36     	; 0x880 <__stack+0x21>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	e8 16       	cp	r14, r24
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	f8 06       	cpc	r15, r24
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	08 07       	cpc	r16, r24
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	18 07       	cpc	r17, r24
     86c:	28 f0       	brcs	.+10     	; 0x878 <__stack+0x19>
     86e:	88 e1       	ldi	r24, 0x18	; 24
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	80 e1       	ldi	r24, 0x10	; 16
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	20 e2       	ldi	r18, 0x20	; 32
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	28 1b       	sub	r18, r24
     88a:	39 0b       	sbc	r19, r25
     88c:	4a 0b       	sbc	r20, r26
     88e:	5b 0b       	sbc	r21, r27
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	16 95       	lsr	r17
     894:	07 95       	ror	r16
     896:	f7 94       	ror	r15
     898:	e7 94       	ror	r14
     89a:	8a 95       	dec	r24
     89c:	d2 f7       	brpl	.-12     	; 0x892 <__stack+0x33>
     89e:	f7 01       	movw	r30, r14
     8a0:	e8 59       	subi	r30, 0x98	; 152
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	80 81       	ld	r24, Z
     8a6:	28 1b       	sub	r18, r24
     8a8:	31 09       	sbc	r19, r1
     8aa:	41 09       	sbc	r20, r1
     8ac:	51 09       	sbc	r21, r1
     8ae:	c9 01       	movw	r24, r18
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	08 95       	ret

000008ba <__pack_f>:
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	fc 01       	movw	r30, r24
     8c6:	e4 80       	ldd	r14, Z+4	; 0x04
     8c8:	f5 80       	ldd	r15, Z+5	; 0x05
     8ca:	06 81       	ldd	r16, Z+6	; 0x06
     8cc:	17 81       	ldd	r17, Z+7	; 0x07
     8ce:	d1 80       	ldd	r13, Z+1	; 0x01
     8d0:	80 81       	ld	r24, Z
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	48 f4       	brcc	.+18     	; 0x8e8 <__pack_f+0x2e>
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	a0 e1       	ldi	r26, 0x10	; 16
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	e8 2a       	or	r14, r24
     8e0:	f9 2a       	or	r15, r25
     8e2:	0a 2b       	or	r16, r26
     8e4:	1b 2b       	or	r17, r27
     8e6:	a5 c0       	rjmp	.+330    	; 0xa32 <__pack_f+0x178>
     8e8:	84 30       	cpi	r24, 0x04	; 4
     8ea:	09 f4       	brne	.+2      	; 0x8ee <__pack_f+0x34>
     8ec:	9f c0       	rjmp	.+318    	; 0xa2c <__pack_f+0x172>
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	21 f4       	brne	.+8      	; 0x8fa <__pack_f+0x40>
     8f2:	ee 24       	eor	r14, r14
     8f4:	ff 24       	eor	r15, r15
     8f6:	87 01       	movw	r16, r14
     8f8:	05 c0       	rjmp	.+10     	; 0x904 <__pack_f+0x4a>
     8fa:	e1 14       	cp	r14, r1
     8fc:	f1 04       	cpc	r15, r1
     8fe:	01 05       	cpc	r16, r1
     900:	11 05       	cpc	r17, r1
     902:	19 f4       	brne	.+6      	; 0x90a <__pack_f+0x50>
     904:	e0 e0       	ldi	r30, 0x00	; 0
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	96 c0       	rjmp	.+300    	; 0xa36 <__pack_f+0x17c>
     90a:	62 81       	ldd	r22, Z+2	; 0x02
     90c:	73 81       	ldd	r23, Z+3	; 0x03
     90e:	9f ef       	ldi	r25, 0xFF	; 255
     910:	62 38       	cpi	r22, 0x82	; 130
     912:	79 07       	cpc	r23, r25
     914:	0c f0       	brlt	.+2      	; 0x918 <__pack_f+0x5e>
     916:	5b c0       	rjmp	.+182    	; 0x9ce <__pack_f+0x114>
     918:	22 e8       	ldi	r18, 0x82	; 130
     91a:	3f ef       	ldi	r19, 0xFF	; 255
     91c:	26 1b       	sub	r18, r22
     91e:	37 0b       	sbc	r19, r23
     920:	2a 31       	cpi	r18, 0x1A	; 26
     922:	31 05       	cpc	r19, r1
     924:	2c f0       	brlt	.+10     	; 0x930 <__pack_f+0x76>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	2a c0       	rjmp	.+84     	; 0x984 <__pack_f+0xca>
     930:	b8 01       	movw	r22, r16
     932:	a7 01       	movw	r20, r14
     934:	02 2e       	mov	r0, r18
     936:	04 c0       	rjmp	.+8      	; 0x940 <__pack_f+0x86>
     938:	76 95       	lsr	r23
     93a:	67 95       	ror	r22
     93c:	57 95       	ror	r21
     93e:	47 95       	ror	r20
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__pack_f+0x7e>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	04 c0       	rjmp	.+8      	; 0x956 <__pack_f+0x9c>
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	aa 1f       	adc	r26, r26
     954:	bb 1f       	adc	r27, r27
     956:	2a 95       	dec	r18
     958:	d2 f7       	brpl	.-12     	; 0x94e <__pack_f+0x94>
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	a1 09       	sbc	r26, r1
     95e:	b1 09       	sbc	r27, r1
     960:	8e 21       	and	r24, r14
     962:	9f 21       	and	r25, r15
     964:	a0 23       	and	r26, r16
     966:	b1 23       	and	r27, r17
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	a1 05       	cpc	r26, r1
     96c:	b1 05       	cpc	r27, r1
     96e:	21 f0       	breq	.+8      	; 0x978 <__pack_f+0xbe>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e0       	ldi	r26, 0x00	; 0
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	9a 01       	movw	r18, r20
     97a:	ab 01       	movw	r20, r22
     97c:	28 2b       	or	r18, r24
     97e:	39 2b       	or	r19, r25
     980:	4a 2b       	or	r20, r26
     982:	5b 2b       	or	r21, r27
     984:	da 01       	movw	r26, r20
     986:	c9 01       	movw	r24, r18
     988:	8f 77       	andi	r24, 0x7F	; 127
     98a:	90 70       	andi	r25, 0x00	; 0
     98c:	a0 70       	andi	r26, 0x00	; 0
     98e:	b0 70       	andi	r27, 0x00	; 0
     990:	80 34       	cpi	r24, 0x40	; 64
     992:	91 05       	cpc	r25, r1
     994:	a1 05       	cpc	r26, r1
     996:	b1 05       	cpc	r27, r1
     998:	39 f4       	brne	.+14     	; 0x9a8 <__pack_f+0xee>
     99a:	27 ff       	sbrs	r18, 7
     99c:	09 c0       	rjmp	.+18     	; 0x9b0 <__pack_f+0xf6>
     99e:	20 5c       	subi	r18, 0xC0	; 192
     9a0:	3f 4f       	sbci	r19, 0xFF	; 255
     9a2:	4f 4f       	sbci	r20, 0xFF	; 255
     9a4:	5f 4f       	sbci	r21, 0xFF	; 255
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__pack_f+0xf6>
     9a8:	21 5c       	subi	r18, 0xC1	; 193
     9aa:	3f 4f       	sbci	r19, 0xFF	; 255
     9ac:	4f 4f       	sbci	r20, 0xFF	; 255
     9ae:	5f 4f       	sbci	r21, 0xFF	; 255
     9b0:	e0 e0       	ldi	r30, 0x00	; 0
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	20 30       	cpi	r18, 0x00	; 0
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	3a 07       	cpc	r19, r26
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	4a 07       	cpc	r20, r26
     9be:	a0 e4       	ldi	r26, 0x40	; 64
     9c0:	5a 07       	cpc	r21, r26
     9c2:	10 f0       	brcs	.+4      	; 0x9c8 <__pack_f+0x10e>
     9c4:	e1 e0       	ldi	r30, 0x01	; 1
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	79 01       	movw	r14, r18
     9ca:	8a 01       	movw	r16, r20
     9cc:	27 c0       	rjmp	.+78     	; 0xa1c <__pack_f+0x162>
     9ce:	60 38       	cpi	r22, 0x80	; 128
     9d0:	71 05       	cpc	r23, r1
     9d2:	64 f5       	brge	.+88     	; 0xa2c <__pack_f+0x172>
     9d4:	fb 01       	movw	r30, r22
     9d6:	e1 58       	subi	r30, 0x81	; 129
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	d8 01       	movw	r26, r16
     9dc:	c7 01       	movw	r24, r14
     9de:	8f 77       	andi	r24, 0x7F	; 127
     9e0:	90 70       	andi	r25, 0x00	; 0
     9e2:	a0 70       	andi	r26, 0x00	; 0
     9e4:	b0 70       	andi	r27, 0x00	; 0
     9e6:	80 34       	cpi	r24, 0x40	; 64
     9e8:	91 05       	cpc	r25, r1
     9ea:	a1 05       	cpc	r26, r1
     9ec:	b1 05       	cpc	r27, r1
     9ee:	39 f4       	brne	.+14     	; 0x9fe <__pack_f+0x144>
     9f0:	e7 fe       	sbrs	r14, 7
     9f2:	0d c0       	rjmp	.+26     	; 0xa0e <__pack_f+0x154>
     9f4:	80 e4       	ldi	r24, 0x40	; 64
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__pack_f+0x14c>
     9fe:	8f e3       	ldi	r24, 0x3F	; 63
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	a0 e0       	ldi	r26, 0x00	; 0
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e8 0e       	add	r14, r24
     a08:	f9 1e       	adc	r15, r25
     a0a:	0a 1f       	adc	r16, r26
     a0c:	1b 1f       	adc	r17, r27
     a0e:	17 ff       	sbrs	r17, 7
     a10:	05 c0       	rjmp	.+10     	; 0xa1c <__pack_f+0x162>
     a12:	16 95       	lsr	r17
     a14:	07 95       	ror	r16
     a16:	f7 94       	ror	r15
     a18:	e7 94       	ror	r14
     a1a:	31 96       	adiw	r30, 0x01	; 1
     a1c:	87 e0       	ldi	r24, 0x07	; 7
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d1 f7       	brne	.-12     	; 0xa1e <__pack_f+0x164>
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <__pack_f+0x17c>
     a2c:	ee 24       	eor	r14, r14
     a2e:	ff 24       	eor	r15, r15
     a30:	87 01       	movw	r16, r14
     a32:	ef ef       	ldi	r30, 0xFF	; 255
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	6e 2f       	mov	r22, r30
     a38:	67 95       	ror	r22
     a3a:	66 27       	eor	r22, r22
     a3c:	67 95       	ror	r22
     a3e:	90 2f       	mov	r25, r16
     a40:	9f 77       	andi	r25, 0x7F	; 127
     a42:	d7 94       	ror	r13
     a44:	dd 24       	eor	r13, r13
     a46:	d7 94       	ror	r13
     a48:	8e 2f       	mov	r24, r30
     a4a:	86 95       	lsr	r24
     a4c:	49 2f       	mov	r20, r25
     a4e:	46 2b       	or	r20, r22
     a50:	58 2f       	mov	r21, r24
     a52:	5d 29       	or	r21, r13
     a54:	b7 01       	movw	r22, r14
     a56:	ca 01       	movw	r24, r20
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	08 95       	ret

00000a64 <__unpack_f>:
     a64:	fc 01       	movw	r30, r24
     a66:	db 01       	movw	r26, r22
     a68:	40 81       	ld	r20, Z
     a6a:	51 81       	ldd	r21, Z+1	; 0x01
     a6c:	22 81       	ldd	r18, Z+2	; 0x02
     a6e:	62 2f       	mov	r22, r18
     a70:	6f 77       	andi	r22, 0x7F	; 127
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	22 1f       	adc	r18, r18
     a76:	22 27       	eor	r18, r18
     a78:	22 1f       	adc	r18, r18
     a7a:	93 81       	ldd	r25, Z+3	; 0x03
     a7c:	89 2f       	mov	r24, r25
     a7e:	88 0f       	add	r24, r24
     a80:	82 2b       	or	r24, r18
     a82:	28 2f       	mov	r18, r24
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	99 1f       	adc	r25, r25
     a88:	99 27       	eor	r25, r25
     a8a:	99 1f       	adc	r25, r25
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	9c 93       	st	X, r25
     a90:	11 97       	sbiw	r26, 0x01	; 1
     a92:	21 15       	cp	r18, r1
     a94:	31 05       	cpc	r19, r1
     a96:	a9 f5       	brne	.+106    	; 0xb02 <__unpack_f+0x9e>
     a98:	41 15       	cp	r20, r1
     a9a:	51 05       	cpc	r21, r1
     a9c:	61 05       	cpc	r22, r1
     a9e:	71 05       	cpc	r23, r1
     aa0:	11 f4       	brne	.+4      	; 0xaa6 <__unpack_f+0x42>
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	37 c0       	rjmp	.+110    	; 0xb14 <__unpack_f+0xb0>
     aa6:	82 e8       	ldi	r24, 0x82	; 130
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
     aaa:	13 96       	adiw	r26, 0x03	; 3
     aac:	9c 93       	st	X, r25
     aae:	8e 93       	st	-X, r24
     ab0:	12 97       	sbiw	r26, 0x02	; 2
     ab2:	9a 01       	movw	r18, r20
     ab4:	ab 01       	movw	r20, r22
     ab6:	67 e0       	ldi	r22, 0x07	; 7
     ab8:	22 0f       	add	r18, r18
     aba:	33 1f       	adc	r19, r19
     abc:	44 1f       	adc	r20, r20
     abe:	55 1f       	adc	r21, r21
     ac0:	6a 95       	dec	r22
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__unpack_f+0x54>
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	8c 93       	st	X, r24
     ac8:	0d c0       	rjmp	.+26     	; 0xae4 <__unpack_f+0x80>
     aca:	22 0f       	add	r18, r18
     acc:	33 1f       	adc	r19, r19
     ace:	44 1f       	adc	r20, r20
     ad0:	55 1f       	adc	r21, r21
     ad2:	12 96       	adiw	r26, 0x02	; 2
     ad4:	8d 91       	ld	r24, X+
     ad6:	9c 91       	ld	r25, X
     ad8:	13 97       	sbiw	r26, 0x03	; 3
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	13 96       	adiw	r26, 0x03	; 3
     ade:	9c 93       	st	X, r25
     ae0:	8e 93       	st	-X, r24
     ae2:	12 97       	sbiw	r26, 0x02	; 2
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	38 07       	cpc	r19, r24
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	48 07       	cpc	r20, r24
     aee:	80 e4       	ldi	r24, 0x40	; 64
     af0:	58 07       	cpc	r21, r24
     af2:	58 f3       	brcs	.-42     	; 0xaca <__unpack_f+0x66>
     af4:	14 96       	adiw	r26, 0x04	; 4
     af6:	2d 93       	st	X+, r18
     af8:	3d 93       	st	X+, r19
     afa:	4d 93       	st	X+, r20
     afc:	5c 93       	st	X, r21
     afe:	17 97       	sbiw	r26, 0x07	; 7
     b00:	08 95       	ret
     b02:	2f 3f       	cpi	r18, 0xFF	; 255
     b04:	31 05       	cpc	r19, r1
     b06:	79 f4       	brne	.+30     	; 0xb26 <__unpack_f+0xc2>
     b08:	41 15       	cp	r20, r1
     b0a:	51 05       	cpc	r21, r1
     b0c:	61 05       	cpc	r22, r1
     b0e:	71 05       	cpc	r23, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__unpack_f+0xb4>
     b12:	84 e0       	ldi	r24, 0x04	; 4
     b14:	8c 93       	st	X, r24
     b16:	08 95       	ret
     b18:	64 ff       	sbrs	r22, 4
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <__unpack_f+0xbe>
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	8c 93       	st	X, r24
     b20:	12 c0       	rjmp	.+36     	; 0xb46 <__unpack_f+0xe2>
     b22:	1c 92       	st	X, r1
     b24:	10 c0       	rjmp	.+32     	; 0xb46 <__unpack_f+0xe2>
     b26:	2f 57       	subi	r18, 0x7F	; 127
     b28:	30 40       	sbci	r19, 0x00	; 0
     b2a:	13 96       	adiw	r26, 0x03	; 3
     b2c:	3c 93       	st	X, r19
     b2e:	2e 93       	st	-X, r18
     b30:	12 97       	sbiw	r26, 0x02	; 2
     b32:	83 e0       	ldi	r24, 0x03	; 3
     b34:	8c 93       	st	X, r24
     b36:	87 e0       	ldi	r24, 0x07	; 7
     b38:	44 0f       	add	r20, r20
     b3a:	55 1f       	adc	r21, r21
     b3c:	66 1f       	adc	r22, r22
     b3e:	77 1f       	adc	r23, r23
     b40:	8a 95       	dec	r24
     b42:	d1 f7       	brne	.-12     	; 0xb38 <__unpack_f+0xd4>
     b44:	70 64       	ori	r23, 0x40	; 64
     b46:	14 96       	adiw	r26, 0x04	; 4
     b48:	4d 93       	st	X+, r20
     b4a:	5d 93       	st	X+, r21
     b4c:	6d 93       	st	X+, r22
     b4e:	7c 93       	st	X, r23
     b50:	17 97       	sbiw	r26, 0x07	; 7
     b52:	08 95       	ret

00000b54 <__fpcmp_parts_f>:
     b54:	1f 93       	push	r17
     b56:	dc 01       	movw	r26, r24
     b58:	fb 01       	movw	r30, r22
     b5a:	9c 91       	ld	r25, X
     b5c:	92 30       	cpi	r25, 0x02	; 2
     b5e:	08 f4       	brcc	.+2      	; 0xb62 <__fpcmp_parts_f+0xe>
     b60:	47 c0       	rjmp	.+142    	; 0xbf0 <__fpcmp_parts_f+0x9c>
     b62:	80 81       	ld	r24, Z
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	08 f4       	brcc	.+2      	; 0xb6a <__fpcmp_parts_f+0x16>
     b68:	43 c0       	rjmp	.+134    	; 0xbf0 <__fpcmp_parts_f+0x9c>
     b6a:	94 30       	cpi	r25, 0x04	; 4
     b6c:	51 f4       	brne	.+20     	; 0xb82 <__fpcmp_parts_f+0x2e>
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	1c 91       	ld	r17, X
     b72:	84 30       	cpi	r24, 0x04	; 4
     b74:	99 f5       	brne	.+102    	; 0xbdc <__fpcmp_parts_f+0x88>
     b76:	81 81       	ldd	r24, Z+1	; 0x01
     b78:	68 2f       	mov	r22, r24
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	61 1b       	sub	r22, r17
     b7e:	71 09       	sbc	r23, r1
     b80:	3f c0       	rjmp	.+126    	; 0xc00 <__fpcmp_parts_f+0xac>
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	21 f0       	breq	.+8      	; 0xb8e <__fpcmp_parts_f+0x3a>
     b86:	92 30       	cpi	r25, 0x02	; 2
     b88:	31 f4       	brne	.+12     	; 0xb96 <__fpcmp_parts_f+0x42>
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	b9 f1       	breq	.+110    	; 0xbfc <__fpcmp_parts_f+0xa8>
     b8e:	81 81       	ldd	r24, Z+1	; 0x01
     b90:	88 23       	and	r24, r24
     b92:	89 f1       	breq	.+98     	; 0xbf6 <__fpcmp_parts_f+0xa2>
     b94:	2d c0       	rjmp	.+90     	; 0xbf0 <__fpcmp_parts_f+0x9c>
     b96:	11 96       	adiw	r26, 0x01	; 1
     b98:	1c 91       	ld	r17, X
     b9a:	11 97       	sbiw	r26, 0x01	; 1
     b9c:	82 30       	cpi	r24, 0x02	; 2
     b9e:	f1 f0       	breq	.+60     	; 0xbdc <__fpcmp_parts_f+0x88>
     ba0:	81 81       	ldd	r24, Z+1	; 0x01
     ba2:	18 17       	cp	r17, r24
     ba4:	d9 f4       	brne	.+54     	; 0xbdc <__fpcmp_parts_f+0x88>
     ba6:	12 96       	adiw	r26, 0x02	; 2
     ba8:	2d 91       	ld	r18, X+
     baa:	3c 91       	ld	r19, X
     bac:	13 97       	sbiw	r26, 0x03	; 3
     bae:	82 81       	ldd	r24, Z+2	; 0x02
     bb0:	93 81       	ldd	r25, Z+3	; 0x03
     bb2:	82 17       	cp	r24, r18
     bb4:	93 07       	cpc	r25, r19
     bb6:	94 f0       	brlt	.+36     	; 0xbdc <__fpcmp_parts_f+0x88>
     bb8:	28 17       	cp	r18, r24
     bba:	39 07       	cpc	r19, r25
     bbc:	bc f0       	brlt	.+46     	; 0xbec <__fpcmp_parts_f+0x98>
     bbe:	14 96       	adiw	r26, 0x04	; 4
     bc0:	8d 91       	ld	r24, X+
     bc2:	9d 91       	ld	r25, X+
     bc4:	0d 90       	ld	r0, X+
     bc6:	bc 91       	ld	r27, X
     bc8:	a0 2d       	mov	r26, r0
     bca:	24 81       	ldd	r18, Z+4	; 0x04
     bcc:	35 81       	ldd	r19, Z+5	; 0x05
     bce:	46 81       	ldd	r20, Z+6	; 0x06
     bd0:	57 81       	ldd	r21, Z+7	; 0x07
     bd2:	28 17       	cp	r18, r24
     bd4:	39 07       	cpc	r19, r25
     bd6:	4a 07       	cpc	r20, r26
     bd8:	5b 07       	cpc	r21, r27
     bda:	18 f4       	brcc	.+6      	; 0xbe2 <__fpcmp_parts_f+0x8e>
     bdc:	11 23       	and	r17, r17
     bde:	41 f0       	breq	.+16     	; 0xbf0 <__fpcmp_parts_f+0x9c>
     be0:	0a c0       	rjmp	.+20     	; 0xbf6 <__fpcmp_parts_f+0xa2>
     be2:	82 17       	cp	r24, r18
     be4:	93 07       	cpc	r25, r19
     be6:	a4 07       	cpc	r26, r20
     be8:	b5 07       	cpc	r27, r21
     bea:	40 f4       	brcc	.+16     	; 0xbfc <__fpcmp_parts_f+0xa8>
     bec:	11 23       	and	r17, r17
     bee:	19 f0       	breq	.+6      	; 0xbf6 <__fpcmp_parts_f+0xa2>
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <__fpcmp_parts_f+0xac>
     bf6:	6f ef       	ldi	r22, 0xFF	; 255
     bf8:	7f ef       	ldi	r23, 0xFF	; 255
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <__fpcmp_parts_f+0xac>
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	cb 01       	movw	r24, r22
     c02:	1f 91       	pop	r17
     c04:	08 95       	ret

00000c06 <DIO_enuInit>:
#define DIO_PINB 1
#define DIO_PINC 2
#define DIO_PIND 3

DIO_tenuErrorStatus DIO_enuInit(void)
{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <DIO_enuInit+0x6>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <DIO_enuInit+0x8>
     c0e:	0f 92       	push	r0
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	
	u8 i;
	u8 Loc_u8PortNumber = 0;
     c14:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8PinNumber = 0;
     c16:	19 82       	std	Y+1, r1	; 0x01

	for(i = 0; i<DIO_enuNumberOfPins;i++)
     c18:	1b 82       	std	Y+3, r1	; 0x03
     c1a:	c8 c1       	rjmp	.+912    	; 0xfac <DIO_enuInit+0x3a6>
	{
		Loc_u8PortNumber = i/8;
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	86 95       	lsr	r24
     c20:	86 95       	lsr	r24
     c22:	86 95       	lsr	r24
     c24:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8PinNumber = i%8;
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	87 70       	andi	r24, 0x07	; 7
     c2a:	89 83       	std	Y+1, r24	; 0x01
		switch (Loc_u8PortNumber)
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	3d 83       	std	Y+5, r19	; 0x05
     c34:	2c 83       	std	Y+4, r18	; 0x04
     c36:	8c 81       	ldd	r24, Y+4	; 0x04
     c38:	9d 81       	ldd	r25, Y+5	; 0x05
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	91 05       	cpc	r25, r1
     c3e:	09 f4       	brne	.+2      	; 0xc42 <DIO_enuInit+0x3c>
     c40:	7e c0       	rjmp	.+252    	; 0xd3e <DIO_enuInit+0x138>
     c42:	2c 81       	ldd	r18, Y+4	; 0x04
     c44:	3d 81       	ldd	r19, Y+5	; 0x05
     c46:	22 30       	cpi	r18, 0x02	; 2
     c48:	31 05       	cpc	r19, r1
     c4a:	2c f4       	brge	.+10     	; 0xc56 <DIO_enuInit+0x50>
     c4c:	8c 81       	ldd	r24, Y+4	; 0x04
     c4e:	9d 81       	ldd	r25, Y+5	; 0x05
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	71 f0       	breq	.+28     	; 0xc70 <DIO_enuInit+0x6a>
     c54:	a8 c1       	rjmp	.+848    	; 0xfa6 <DIO_enuInit+0x3a0>
     c56:	2c 81       	ldd	r18, Y+4	; 0x04
     c58:	3d 81       	ldd	r19, Y+5	; 0x05
     c5a:	22 30       	cpi	r18, 0x02	; 2
     c5c:	31 05       	cpc	r19, r1
     c5e:	09 f4       	brne	.+2      	; 0xc62 <DIO_enuInit+0x5c>
     c60:	d5 c0       	rjmp	.+426    	; 0xe0c <DIO_enuInit+0x206>
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	9d 81       	ldd	r25, Y+5	; 0x05
     c66:	83 30       	cpi	r24, 0x03	; 3
     c68:	91 05       	cpc	r25, r1
     c6a:	09 f4       	brne	.+2      	; 0xc6e <DIO_enuInit+0x68>
     c6c:	36 c1       	rjmp	.+620    	; 0xeda <DIO_enuInit+0x2d4>
     c6e:	9b c1       	rjmp	.+822    	; 0xfa6 <DIO_enuInit+0x3a0>
		{
			case(DIO_PORTA):
				if (DIO_strPinCFG[i].DIO_PinDirection == DIO_DIR_OUTPUT)
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	88 2f       	mov	r24, r24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	fc 01       	movw	r30, r24
     c7c:	e8 53       	subi	r30, 0x38	; 56
     c7e:	fe 4f       	sbci	r31, 0xFE	; 254
     c80:	80 81       	ld	r24, Z
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	a1 f4       	brne	.+40     	; 0xcae <DIO_enuInit+0xa8>
				{
					SET_BIT(DDRA,Loc_u8PinNumber);
     c86:	aa e3       	ldi	r26, 0x3A	; 58
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	ea e3       	ldi	r30, 0x3A	; 58
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_enuInit+0x9e>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_enuInit+0x9a>
     ca8:	84 2b       	or	r24, r20
     caa:	8c 93       	st	X, r24
     cac:	7c c1       	rjmp	.+760    	; 0xfa6 <DIO_enuInit+0x3a0>
				}
				else
				{
					CLR_BIT(DDRA,Loc_u8PinNumber);
     cae:	aa e3       	ldi	r26, 0x3A	; 58
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ea e3       	ldi	r30, 0x3A	; 58
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_enuInit+0xc6>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_enuInit+0xc2>
     cd0:	80 95       	com	r24
     cd2:	84 23       	and	r24, r20
     cd4:	8c 93       	st	X, r24
					if(DIO_strPinCFG[i].DIO_InputStatus == DIO_INPUT_PULL_UP)
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	fc 01       	movw	r30, r24
     ce2:	e7 53       	subi	r30, 0x37	; 55
     ce4:	fe 4f       	sbci	r31, 0xFE	; 254
     ce6:	80 81       	ld	r24, Z
     ce8:	88 23       	and	r24, r24
     cea:	a1 f4       	brne	.+40     	; 0xd14 <DIO_enuInit+0x10e>
					{
						SET_BIT(PORTA,Loc_u8PinNumber);
     cec:	ab e3       	ldi	r26, 0x3B	; 59
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	eb e3       	ldi	r30, 0x3B	; 59
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_enuInit+0x104>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_enuInit+0x100>
     d0e:	84 2b       	or	r24, r20
     d10:	8c 93       	st	X, r24
     d12:	49 c1       	rjmp	.+658    	; 0xfa6 <DIO_enuInit+0x3a0>
					}
					else
					{
						CLR_BIT(PORTA,Loc_u8PinNumber);
     d14:	ab e3       	ldi	r26, 0x3B	; 59
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	eb e3       	ldi	r30, 0x3B	; 59
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 2e       	mov	r0, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_enuInit+0x12c>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_enuInit+0x128>
     d36:	80 95       	com	r24
     d38:	84 23       	and	r24, r20
     d3a:	8c 93       	st	X, r24
     d3c:	34 c1       	rjmp	.+616    	; 0xfa6 <DIO_enuInit+0x3a0>

					}
				}
				break;
			case(DIO_PORTB):
				if (DIO_strPinCFG[i].DIO_PinDirection == DIO_DIR_OUTPUT)
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	fc 01       	movw	r30, r24
     d4a:	e8 53       	subi	r30, 0x38	; 56
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	80 81       	ld	r24, Z
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	a1 f4       	brne	.+40     	; 0xd7c <DIO_enuInit+0x176>
				{
					SET_BIT(DDRB,Loc_u8PinNumber);
     d54:	a7 e3       	ldi	r26, 0x37	; 55
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e3       	ldi	r30, 0x37	; 55
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <DIO_enuInit+0x16c>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <DIO_enuInit+0x168>
     d76:	84 2b       	or	r24, r20
     d78:	8c 93       	st	X, r24
     d7a:	15 c1       	rjmp	.+554    	; 0xfa6 <DIO_enuInit+0x3a0>
				}
				else
				{
					CLR_BIT(DDRB,Loc_u8PinNumber);
     d7c:	a7 e3       	ldi	r26, 0x37	; 55
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e7 e3       	ldi	r30, 0x37	; 55
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_enuInit+0x194>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_enuInit+0x190>
     d9e:	80 95       	com	r24
     da0:	84 23       	and	r24, r20
     da2:	8c 93       	st	X, r24
					if(DIO_strPinCFG[i].DIO_InputStatus == DIO_INPUT_PULL_UP)
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	fc 01       	movw	r30, r24
     db0:	e7 53       	subi	r30, 0x37	; 55
     db2:	fe 4f       	sbci	r31, 0xFE	; 254
     db4:	80 81       	ld	r24, Z
     db6:	88 23       	and	r24, r24
     db8:	a1 f4       	brne	.+40     	; 0xde2 <DIO_enuInit+0x1dc>
					{
						SET_BIT(PORTB,Loc_u8PinNumber);
     dba:	a8 e3       	ldi	r26, 0x38	; 56
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e8 e3       	ldi	r30, 0x38	; 56
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_enuInit+0x1d2>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_enuInit+0x1ce>
     ddc:	84 2b       	or	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	e2 c0       	rjmp	.+452    	; 0xfa6 <DIO_enuInit+0x3a0>
					}
					else
					{
						CLR_BIT(PORTB,Loc_u8PinNumber);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_enuInit+0x1fa>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_enuInit+0x1f6>
     e04:	80 95       	com	r24
     e06:	84 23       	and	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	cd c0       	rjmp	.+410    	; 0xfa6 <DIO_enuInit+0x3a0>

					}
				}
				break;
			case(DIO_PORTC):
				if (DIO_strPinCFG[i].DIO_PinDirection == DIO_DIR_OUTPUT)
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	fc 01       	movw	r30, r24
     e18:	e8 53       	subi	r30, 0x38	; 56
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	80 81       	ld	r24, Z
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	a1 f4       	brne	.+40     	; 0xe4a <DIO_enuInit+0x244>
				{
					SET_BIT(DDRC,Loc_u8PinNumber);
     e22:	a4 e3       	ldi	r26, 0x34	; 52
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e4 e3       	ldi	r30, 0x34	; 52
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_enuInit+0x23a>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_enuInit+0x236>
     e44:	84 2b       	or	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	ae c0       	rjmp	.+348    	; 0xfa6 <DIO_enuInit+0x3a0>
				}
				else
				{
					CLR_BIT(DDRC,Loc_u8PinNumber);
     e4a:	a4 e3       	ldi	r26, 0x34	; 52
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e4 e3       	ldi	r30, 0x34	; 52
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_enuInit+0x262>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_enuInit+0x25e>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
					if(DIO_strPinCFG[i].DIO_InputStatus == DIO_INPUT_PULL_UP)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	fc 01       	movw	r30, r24
     e7e:	e7 53       	subi	r30, 0x37	; 55
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	80 81       	ld	r24, Z
     e84:	88 23       	and	r24, r24
     e86:	a1 f4       	brne	.+40     	; 0xeb0 <DIO_enuInit+0x2aa>
					{
						SET_BIT(PORTC,Loc_u8PinNumber);
     e88:	a5 e3       	ldi	r26, 0x35	; 53
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e5 e3       	ldi	r30, 0x35	; 53
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_enuInit+0x2a0>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_enuInit+0x29c>
     eaa:	84 2b       	or	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	7b c0       	rjmp	.+246    	; 0xfa6 <DIO_enuInit+0x3a0>
					}
					else
					{
						CLR_BIT(PORTC,Loc_u8PinNumber);
     eb0:	a5 e3       	ldi	r26, 0x35	; 53
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e5 e3       	ldi	r30, 0x35	; 53
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_enuInit+0x2c8>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_enuInit+0x2c4>
     ed2:	80 95       	com	r24
     ed4:	84 23       	and	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	66 c0       	rjmp	.+204    	; 0xfa6 <DIO_enuInit+0x3a0>

					}
				}
				break;
			case(DIO_PORTD):
				if (DIO_strPinCFG[i].DIO_PinDirection == DIO_DIR_OUTPUT)
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	fc 01       	movw	r30, r24
     ee6:	e8 53       	subi	r30, 0x38	; 56
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	80 81       	ld	r24, Z
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	a1 f4       	brne	.+40     	; 0xf18 <DIO_enuInit+0x312>
				{
					SET_BIT(DDRD,Loc_u8PinNumber);
     ef0:	a1 e3       	ldi	r26, 0x31	; 49
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e1 e3       	ldi	r30, 0x31	; 49
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_enuInit+0x308>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_enuInit+0x304>
     f12:	84 2b       	or	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	47 c0       	rjmp	.+142    	; 0xfa6 <DIO_enuInit+0x3a0>
				}
				else
				{
					CLR_BIT(DDRD,Loc_u8PinNumber);
     f18:	a1 e3       	ldi	r26, 0x31	; 49
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e1 e3       	ldi	r30, 0x31	; 49
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_enuInit+0x330>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_enuInit+0x32c>
     f3a:	80 95       	com	r24
     f3c:	84 23       	and	r24, r20
     f3e:	8c 93       	st	X, r24
					if(DIO_strPinCFG[i].DIO_InputStatus == DIO_INPUT_PULL_UP)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	fc 01       	movw	r30, r24
     f4c:	e7 53       	subi	r30, 0x37	; 55
     f4e:	fe 4f       	sbci	r31, 0xFE	; 254
     f50:	80 81       	ld	r24, Z
     f52:	88 23       	and	r24, r24
     f54:	a1 f4       	brne	.+40     	; 0xf7e <DIO_enuInit+0x378>
					{
						SET_BIT(PORTD,Loc_u8PinNumber);
     f56:	a2 e3       	ldi	r26, 0x32	; 50
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e2 e3       	ldi	r30, 0x32	; 50
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_enuInit+0x36e>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_enuInit+0x36a>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	14 c0       	rjmp	.+40     	; 0xfa6 <DIO_enuInit+0x3a0>
					}
					else
					{
						CLR_BIT(PORTD,Loc_u8PinNumber);
     f7e:	a2 e3       	ldi	r26, 0x32	; 50
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e2 e3       	ldi	r30, 0x32	; 50
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_enuInit+0x396>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_enuInit+0x392>
     fa0:	80 95       	com	r24
     fa2:	84 23       	and	r24, r20
     fa4:	8c 93       	st	X, r24
	
	u8 i;
	u8 Loc_u8PortNumber = 0;
	u8 Loc_u8PinNumber = 0;

	for(i = 0; i<DIO_enuNumberOfPins;i++)
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	8b 83       	std	Y+3, r24	; 0x03
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	80 32       	cpi	r24, 0x20	; 32
     fb0:	08 f4       	brcc	.+2      	; 0xfb4 <DIO_enuInit+0x3ae>
     fb2:	34 ce       	rjmp	.-920    	; 0xc1c <DIO_enuInit+0x16>
		}
		
	}
	

	return DIO_enuOK;
     fb4:	80 e0       	ldi	r24, 0x00	; 0

}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <DIO_enuSetPin>:




DIO_tenuErrorStatus DIO_enuSetPin(DIO_tenuPins Cpy_u8PinNumber){
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <DIO_enuSetPin+0x6>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <DIO_enuSetPin+0x8>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <DIO_enuSetPin+0xa>
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	8b 83       	std	Y+3, r24	; 0x03

		if(Cpy_u8PinNumber<0 || Cpy_u8PinNumber>31){
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	80 32       	cpi	r24, 0x20	; 32
     fda:	18 f0       	brcs	.+6      	; 0xfe2 <DIO_enuSetPin+0x1c>
				return DIO_enuNotOK;
     fdc:	21 e0       	ldi	r18, 0x01	; 1
     fde:	2e 83       	std	Y+6, r18	; 0x06
     fe0:	77 c0       	rjmp	.+238    	; 0x10d0 <DIO_enuSetPin+0x10a>
		}
			u8 Loc_u8PortNumber = Cpy_u8PinNumber/8;
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	86 95       	lsr	r24
     fe6:	86 95       	lsr	r24
     fe8:	86 95       	lsr	r24
     fea:	8a 83       	std	Y+2, r24	; 0x02
			u8 Loc_u8PinNumber = Cpy_u8PinNumber%8;
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	87 70       	andi	r24, 0x07	; 7
     ff0:	89 83       	std	Y+1, r24	; 0x01
			switch (Loc_u8PortNumber)
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3d 83       	std	Y+5, r19	; 0x05
     ffa:	2c 83       	std	Y+4, r18	; 0x04
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	91 05       	cpc	r25, r1
    1004:	49 f1       	breq	.+82     	; 0x1058 <DIO_enuSetPin+0x92>
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	2c f4       	brge	.+10     	; 0x101a <DIO_enuSetPin+0x54>
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	9d 81       	ldd	r25, Y+5	; 0x05
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	61 f0       	breq	.+24     	; 0x1030 <DIO_enuSetPin+0x6a>
    1018:	5a c0       	rjmp	.+180    	; 0x10ce <DIO_enuSetPin+0x108>
    101a:	2c 81       	ldd	r18, Y+4	; 0x04
    101c:	3d 81       	ldd	r19, Y+5	; 0x05
    101e:	22 30       	cpi	r18, 0x02	; 2
    1020:	31 05       	cpc	r19, r1
    1022:	71 f1       	breq	.+92     	; 0x1080 <DIO_enuSetPin+0xba>
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	9d 81       	ldd	r25, Y+5	; 0x05
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	91 05       	cpc	r25, r1
    102c:	e9 f1       	breq	.+122    	; 0x10a8 <DIO_enuSetPin+0xe2>
    102e:	4f c0       	rjmp	.+158    	; 0x10ce <DIO_enuSetPin+0x108>
			{
				case(DIO_PORTA):
					SET_BIT(PORTA,Loc_u8PinNumber);
    1030:	ab e3       	ldi	r26, 0x3B	; 59
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	eb e3       	ldi	r30, 0x3B	; 59
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_enuSetPin+0x88>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_enuSetPin+0x84>
    1052:	84 2b       	or	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	3b c0       	rjmp	.+118    	; 0x10ce <DIO_enuSetPin+0x108>
					break;
				case(DIO_PORTB):
					SET_BIT(PORTB,Loc_u8PinNumber);
    1058:	a8 e3       	ldi	r26, 0x38	; 56
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e8 e3       	ldi	r30, 0x38	; 56
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_enuSetPin+0xb0>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_enuSetPin+0xac>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	27 c0       	rjmp	.+78     	; 0x10ce <DIO_enuSetPin+0x108>
					break;
				case(DIO_PORTC):
						SET_BIT(PORTC,Loc_u8PinNumber);
    1080:	a5 e3       	ldi	r26, 0x35	; 53
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e5 e3       	ldi	r30, 0x35	; 53
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_enuSetPin+0xd8>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_enuSetPin+0xd4>
    10a2:	84 2b       	or	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	13 c0       	rjmp	.+38     	; 0x10ce <DIO_enuSetPin+0x108>
					break;
				case(DIO_PORTD):
						SET_BIT(PORTD,Loc_u8PinNumber);
    10a8:	a2 e3       	ldi	r26, 0x32	; 50
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e2 e3       	ldi	r30, 0x32	; 50
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_enuSetPin+0x100>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_enuSetPin+0xfc>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
					break;

}
			return DIO_enuOK;
    10ce:	1e 82       	std	Y+6, r1	; 0x06
    10d0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    10d2:	26 96       	adiw	r28, 0x06	; 6
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <DIO_u8SetPortValue>:

DIO_tenuErrorStatus DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <DIO_u8SetPortValue+0x6>
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <DIO_u8SetPortValue+0x8>
    10ec:	0f 92       	push	r0
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	8a 83       	std	Y+2, r24	; 0x02
    10f4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=DIO_enuOK;
    10f6:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3d 83       	std	Y+5, r19	; 0x05
    1100:	2c 83       	std	Y+4, r18	; 0x04
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	9d 81       	ldd	r25, Y+5	; 0x05
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	91 05       	cpc	r25, r1
    110a:	d1 f0       	breq	.+52     	; 0x1140 <DIO_u8SetPortValue+0x5c>
    110c:	2c 81       	ldd	r18, Y+4	; 0x04
    110e:	3d 81       	ldd	r19, Y+5	; 0x05
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	2c f4       	brge	.+10     	; 0x1120 <DIO_u8SetPortValue+0x3c>
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	61 f0       	breq	.+24     	; 0x1136 <DIO_u8SetPortValue+0x52>
    111e:	1f c0       	rjmp	.+62     	; 0x115e <DIO_u8SetPortValue+0x7a>
    1120:	2c 81       	ldd	r18, Y+4	; 0x04
    1122:	3d 81       	ldd	r19, Y+5	; 0x05
    1124:	22 30       	cpi	r18, 0x02	; 2
    1126:	31 05       	cpc	r19, r1
    1128:	81 f0       	breq	.+32     	; 0x114a <DIO_u8SetPortValue+0x66>
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	91 05       	cpc	r25, r1
    1132:	81 f0       	breq	.+32     	; 0x1154 <DIO_u8SetPortValue+0x70>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <DIO_u8SetPortValue+0x7a>
	{
	case DIO_PORTA : PORTA = Copy_u8Value; break;
    1136:	eb e3       	ldi	r30, 0x3B	; 59
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	80 83       	st	Z, r24
    113e:	11 c0       	rjmp	.+34     	; 0x1162 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTB : PORTB = Copy_u8Value; break;
    1140:	e8 e3       	ldi	r30, 0x38	; 56
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	80 83       	st	Z, r24
    1148:	0c c0       	rjmp	.+24     	; 0x1162 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTC : PORTC = Copy_u8Value; break;
    114a:	e5 e3       	ldi	r30, 0x35	; 53
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	80 83       	st	Z, r24
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <DIO_u8SetPortValue+0x7e>
	case DIO_PORTD : PORTD = Copy_u8Value; break;
    1154:	e2 e3       	ldi	r30, 0x32	; 50
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	80 83       	st	Z, r24
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=DIO_enuNotOK;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <DIO_enuClearPin>:

DIO_tenuErrorStatus DIO_enuClearPin(DIO_tenuPins Cpy_u8PinNumber){
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <DIO_enuClearPin+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <DIO_enuClearPin+0x8>
    117c:	00 d0       	rcall	.+0      	; 0x117e <DIO_enuClearPin+0xa>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	8b 83       	std	Y+3, r24	; 0x03
	if(Cpy_u8PinNumber<0 || Cpy_u8PinNumber>31){
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	80 32       	cpi	r24, 0x20	; 32
    1188:	18 f0       	brcs	.+6      	; 0x1190 <DIO_enuClearPin+0x1c>
			return DIO_enuNotOK;
    118a:	21 e0       	ldi	r18, 0x01	; 1
    118c:	2e 83       	std	Y+6, r18	; 0x06
    118e:	7c c0       	rjmp	.+248    	; 0x1288 <DIO_enuClearPin+0x114>
	}
		u8 Loc_u8PortNumber = Cpy_u8PinNumber/8;
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	86 95       	lsr	r24
    1194:	86 95       	lsr	r24
    1196:	86 95       	lsr	r24
    1198:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_u8PinNumber = Cpy_u8PinNumber%8;
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	87 70       	andi	r24, 0x07	; 7
    119e:	89 83       	std	Y+1, r24	; 0x01
		switch (Loc_u8PortNumber)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3d 83       	std	Y+5, r19	; 0x05
    11a8:	2c 83       	std	Y+4, r18	; 0x04
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	9d 81       	ldd	r25, Y+5	; 0x05
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	59 f1       	breq	.+86     	; 0x120a <DIO_enuClearPin+0x96>
    11b4:	2c 81       	ldd	r18, Y+4	; 0x04
    11b6:	3d 81       	ldd	r19, Y+5	; 0x05
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <DIO_enuClearPin+0x54>
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	69 f0       	breq	.+26     	; 0x11e0 <DIO_enuClearPin+0x6c>
    11c6:	5f c0       	rjmp	.+190    	; 0x1286 <DIO_enuClearPin+0x112>
    11c8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ca:	3d 81       	ldd	r19, Y+5	; 0x05
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	89 f1       	breq	.+98     	; 0x1234 <DIO_enuClearPin+0xc0>
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	9d 81       	ldd	r25, Y+5	; 0x05
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	91 05       	cpc	r25, r1
    11da:	09 f4       	brne	.+2      	; 0x11de <DIO_enuClearPin+0x6a>
    11dc:	40 c0       	rjmp	.+128    	; 0x125e <DIO_enuClearPin+0xea>
    11de:	53 c0       	rjmp	.+166    	; 0x1286 <DIO_enuClearPin+0x112>
		{
			case(DIO_PORTA):
				CLR_BIT(PORTA,Loc_u8PinNumber);
    11e0:	ab e3       	ldi	r26, 0x3B	; 59
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	eb e3       	ldi	r30, 0x3B	; 59
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_enuClearPin+0x8a>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_enuClearPin+0x86>
    1202:	80 95       	com	r24
    1204:	84 23       	and	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	3e c0       	rjmp	.+124    	; 0x1286 <DIO_enuClearPin+0x112>
				break;
			case(DIO_PORTB):
				CLR_BIT(PORTB,Loc_u8PinNumber);
    120a:	a8 e3       	ldi	r26, 0x38	; 56
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_enuClearPin+0xb4>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_enuClearPin+0xb0>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	29 c0       	rjmp	.+82     	; 0x1286 <DIO_enuClearPin+0x112>
				break;
			case(DIO_PORTC):
				CLR_BIT(PORTC,Loc_u8PinNumber);
    1234:	a5 e3       	ldi	r26, 0x35	; 53
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e5 e3       	ldi	r30, 0x35	; 53
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_enuClearPin+0xde>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_enuClearPin+0xda>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <DIO_enuClearPin+0x112>
				break;
			case(DIO_PORTD):
		        CLR_BIT(PORTD,Loc_u8PinNumber);
    125e:	a2 e3       	ldi	r26, 0x32	; 50
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e2 e3       	ldi	r30, 0x32	; 50
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_enuClearPin+0x108>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_enuClearPin+0x104>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
				break;

}
		return DIO_enuOK;
    1286:	1e 82       	std	Y+6, r1	; 0x06
    1288:	8e 81       	ldd	r24, Y+6	; 0x06
}
    128a:	26 96       	adiw	r28, 0x06	; 6
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <DIO_enuGetPin>:


DIO_tenuErrorStatus DIO_enuGetPin(DIO_tenuPins Cpy_u8PinNumber,u8* Add_pu8PinValue){
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	28 97       	sbiw	r28, 0x08	; 8
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	8b 83       	std	Y+3, r24	; 0x03
    12b2:	7d 83       	std	Y+5, r23	; 0x05
    12b4:	6c 83       	std	Y+4, r22	; 0x04
	if(Cpy_u8PinNumber<0 || Cpy_u8PinNumber>31){
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	80 32       	cpi	r24, 0x20	; 32
    12ba:	18 f0       	brcs	.+6      	; 0x12c2 <DIO_enuGetPin+0x26>
			return DIO_enuNotOK;
    12bc:	21 e0       	ldi	r18, 0x01	; 1
    12be:	28 87       	std	Y+8, r18	; 0x08
    12c0:	79 c0       	rjmp	.+242    	; 0x13b4 <DIO_enuGetPin+0x118>
	}
	u8 Loc_u8PINNumber = Cpy_u8PinNumber/8;
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	86 95       	lsr	r24
    12c6:	86 95       	lsr	r24
    12c8:	86 95       	lsr	r24
    12ca:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8PinNumber = Cpy_u8PinNumber%8;
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	87 70       	andi	r24, 0x07	; 7
    12d0:	89 83       	std	Y+1, r24	; 0x01
	switch (Loc_u8PINNumber)
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	48 2f       	mov	r20, r24
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	5f 83       	std	Y+7, r21	; 0x07
    12da:	4e 83       	std	Y+6, r20	; 0x06
    12dc:	8e 81       	ldd	r24, Y+6	; 0x06
    12de:	9f 81       	ldd	r25, Y+7	; 0x07
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	59 f1       	breq	.+86     	; 0x133c <DIO_enuGetPin+0xa0>
    12e6:	2e 81       	ldd	r18, Y+6	; 0x06
    12e8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	34 f4       	brge	.+12     	; 0x12fc <DIO_enuGetPin+0x60>
    12f0:	4e 81       	ldd	r20, Y+6	; 0x06
    12f2:	5f 81       	ldd	r21, Y+7	; 0x07
    12f4:	41 15       	cp	r20, r1
    12f6:	51 05       	cpc	r21, r1
    12f8:	69 f0       	breq	.+26     	; 0x1314 <DIO_enuGetPin+0x78>
    12fa:	5b c0       	rjmp	.+182    	; 0x13b2 <DIO_enuGetPin+0x116>
    12fc:	8e 81       	ldd	r24, Y+6	; 0x06
    12fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	91 05       	cpc	r25, r1
    1304:	79 f1       	breq	.+94     	; 0x1364 <DIO_enuGetPin+0xc8>
    1306:	2e 81       	ldd	r18, Y+6	; 0x06
    1308:	3f 81       	ldd	r19, Y+7	; 0x07
    130a:	23 30       	cpi	r18, 0x03	; 3
    130c:	31 05       	cpc	r19, r1
    130e:	09 f4       	brne	.+2      	; 0x1312 <DIO_enuGetPin+0x76>
    1310:	3d c0       	rjmp	.+122    	; 0x138c <DIO_enuGetPin+0xf0>
    1312:	4f c0       	rjmp	.+158    	; 0x13b2 <DIO_enuGetPin+0x116>
	{
		case(DIO_PINA):
		*Add_pu8PinValue= GET_BIT(PINA,Loc_u8PinNumber);
    1314:	e9 e3       	ldi	r30, 0x39	; 57
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_enuGetPin+0x90>
    1328:	55 95       	asr	r21
    132a:	47 95       	ror	r20
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_enuGetPin+0x8c>
    1330:	ca 01       	movw	r24, r20
    1332:	81 70       	andi	r24, 0x01	; 1
    1334:	ec 81       	ldd	r30, Y+4	; 0x04
    1336:	fd 81       	ldd	r31, Y+5	; 0x05
    1338:	80 83       	st	Z, r24
    133a:	3b c0       	rjmp	.+118    	; 0x13b2 <DIO_enuGetPin+0x116>
			break;
		case(DIO_PINB):
		*Add_pu8PinValue= GET_BIT(PINB,Loc_u8PinNumber);
    133c:	e6 e3       	ldi	r30, 0x36	; 54
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	88 2f       	mov	r24, r24
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a9 01       	movw	r20, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_enuGetPin+0xb8>
    1350:	55 95       	asr	r21
    1352:	47 95       	ror	r20
    1354:	8a 95       	dec	r24
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_enuGetPin+0xb4>
    1358:	ca 01       	movw	r24, r20
    135a:	81 70       	andi	r24, 0x01	; 1
    135c:	ec 81       	ldd	r30, Y+4	; 0x04
    135e:	fd 81       	ldd	r31, Y+5	; 0x05
    1360:	80 83       	st	Z, r24
    1362:	27 c0       	rjmp	.+78     	; 0x13b2 <DIO_enuGetPin+0x116>
			break;
		case(DIO_PINC):
		*Add_pu8PinValue= GET_BIT(PINC,Loc_u8PinNumber);
    1364:	e3 e3       	ldi	r30, 0x33	; 51
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a9 01       	movw	r20, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_enuGetPin+0xe0>
    1378:	55 95       	asr	r21
    137a:	47 95       	ror	r20
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_enuGetPin+0xdc>
    1380:	ca 01       	movw	r24, r20
    1382:	81 70       	andi	r24, 0x01	; 1
    1384:	ec 81       	ldd	r30, Y+4	; 0x04
    1386:	fd 81       	ldd	r31, Y+5	; 0x05
    1388:	80 83       	st	Z, r24
    138a:	13 c0       	rjmp	.+38     	; 0x13b2 <DIO_enuGetPin+0x116>
			break;
		case(DIO_PIND):
		*Add_pu8PinValue= GET_BIT(PIND,Loc_u8PinNumber);
    138c:	e0 e3       	ldi	r30, 0x30	; 48
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	88 2f       	mov	r24, r24
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a9 01       	movw	r20, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_enuGetPin+0x108>
    13a0:	55 95       	asr	r21
    13a2:	47 95       	ror	r20
    13a4:	8a 95       	dec	r24
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_enuGetPin+0x104>
    13a8:	ca 01       	movw	r24, r20
    13aa:	81 70       	andi	r24, 0x01	; 1
    13ac:	ec 81       	ldd	r30, Y+4	; 0x04
    13ae:	fd 81       	ldd	r31, Y+5	; 0x05
    13b0:	80 83       	st	Z, r24
			break;

}
	return DIO_enuOK;
    13b2:	18 86       	std	Y+8, r1	; 0x08
    13b4:	88 85       	ldd	r24, Y+8	; 0x08

}
    13b6:	28 96       	adiw	r28, 0x08	; 8
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <Delay_ms>:
#include "Delay_Interface.h"
 
#define FCPU 8000000UL

void Delay_ms(u32 Delay)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <Delay_ms+0x6>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <Delay_ms+0x8>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	69 83       	std	Y+1, r22	; 0x01
    13d6:	7a 83       	std	Y+2, r23	; 0x02
    13d8:	8b 83       	std	Y+3, r24	; 0x03
    13da:	9c 83       	std	Y+4, r25	; 0x04
	Delay = (u32)((f32)Delay*((f32)FCPU/1000000.0)*29.41);
    13dc:	69 81       	ldd	r22, Y+1	; 0x01
    13de:	7a 81       	ldd	r23, Y+2	; 0x02
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	0e 94 95 03 	call	0x72a	; 0x72a <__floatunsisf>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e0       	ldi	r20, 0x00	; 0
    13f6:	51 e4       	ldi	r21, 0x41	; 65
    13f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	2e ea       	ldi	r18, 0xAE	; 174
    1406:	37 e4       	ldi	r19, 0x47	; 71
    1408:	4b ee       	ldi	r20, 0xEB	; 235
    140a:	51 e4       	ldi	r21, 0x41	; 65
    140c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	bc 01       	movw	r22, r24
    1416:	cd 01       	movw	r24, r26
    1418:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	ab 83       	std	Y+3, r26	; 0x03
    1426:	bc 83       	std	Y+4, r27	; 0x04
    1428:	0c c0       	rjmp	.+24     	; 0x1442 <Delay_ms+0x7a>
	while(Delay)
	{
		asm("NOP");
    142a:	00 00       	nop
		Delay--;
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	9a 81       	ldd	r25, Y+2	; 0x02
    1430:	ab 81       	ldd	r26, Y+3	; 0x03
    1432:	bc 81       	ldd	r27, Y+4	; 0x04
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	a1 09       	sbc	r26, r1
    1438:	b1 09       	sbc	r27, r1
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	ab 83       	std	Y+3, r26	; 0x03
    1440:	bc 83       	std	Y+4, r27	; 0x04
#define FCPU 8000000UL

void Delay_ms(u32 Delay)
{
	Delay = (u32)((f32)Delay*((f32)FCPU/1000000.0)*29.41);
	while(Delay)
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	9a 81       	ldd	r25, Y+2	; 0x02
    1446:	ab 81       	ldd	r26, Y+3	; 0x03
    1448:	bc 81       	ldd	r27, Y+4	; 0x04
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	a1 05       	cpc	r26, r1
    144e:	b1 05       	cpc	r27, r1
    1450:	61 f7       	brne	.-40     	; 0x142a <Delay_ms+0x62>
	{
		asm("NOP");
		Delay--;
	}

}
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <LCD_vidInit>:
#include "LCD_Prv.h"
#include "Delay_Interface.h"



void  LCD_vidInit(){
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
	/*Wait for more than 30ms*/
		Delay_ms(40);
    1468:	68 e2       	ldi	r22, 0x28	; 40
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>

	/*Function Set Command: 2 Lines, 5*8 Font Size*/
		LCD_enuSendCommand(0b00111000);
    1474:	88 e3       	ldi	r24, 0x38	; 56
    1476:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_enuSendCommand>

	/*Wait for more than 30ms*/
		//Delay_ms(40);

	/*Display on off control: Display enable, Disable Cursor, No Blink Cursor*/
		LCD_enuSendCommand(0b00001100);
    147a:	8c e0       	ldi	r24, 0x0C	; 12
    147c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_enuSendCommand>

	/*Clear Display*/
		LCD_enuSendCommand(0b00000001);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_enuSendCommand>

}
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <LCD_enuSendData>:

LCD_tenuErrorStatus LCD_enuSendData (u8 Copy_u8Data)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
	/*Clear RS pin to command --> 0*/
	DIO_enuSetPin(DIO_enuPin5);
    1498:	85 e0       	ldi	r24, 0x05	; 5
    149a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_enuSetPin>

	/*Clear R/W pin to write --> 0*/
		DIO_enuClearPin(DIO_enuPin6);
    149e:	86 e0       	ldi	r24, 0x06	; 6
    14a0:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_enuClearPin>

	/*Set Command to data Pins*/
		DIO_u8SetPortValue(LCD_DATA_PORT,Copy_u8Data);
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	69 81       	ldd	r22, Y+1	; 0x01
    14a8:	0e 94 72 08 	call	0x10e4	; 0x10e4 <DIO_u8SetPortValue>

	/*Send Enable Pulse*/
		DIO_enuSetPin(DIO_enuPin7);
    14ac:	87 e0       	ldi	r24, 0x07	; 7
    14ae:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_enuSetPin>
		Delay_ms(2);
    14b2:	62 e0       	ldi	r22, 0x02	; 2
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>
	/*Send Disable Pulse After 2 mile second*/
		DIO_enuClearPin(DIO_enuPin7);
    14be:	87 e0       	ldi	r24, 0x07	; 7
    14c0:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_enuClearPin>

	return LCD_enuOK;
    14c4:	80 e0       	ldi	r24, 0x00	; 0
}
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <LCD_enuSendCommand>:


LCD_tenuErrorStatus LCD_enuSendCommand (u8 Copy_u8Command)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	0f 92       	push	r0
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to command --> 1*/
	DIO_enuClearPin(DIO_enuPin5);
    14da:	85 e0       	ldi	r24, 0x05	; 5
    14dc:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_enuClearPin>

	/*Clear R/W pin to write --> 0*/
		DIO_enuClearPin(DIO_enuPin6);
    14e0:	86 e0       	ldi	r24, 0x06	; 6
    14e2:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_enuClearPin>

	/*Set Command to data Pins*/
		DIO_u8SetPortValue(LCD_DATA_PORT,Copy_u8Command);
    14e6:	83 e0       	ldi	r24, 0x03	; 3
    14e8:	69 81       	ldd	r22, Y+1	; 0x01
    14ea:	0e 94 72 08 	call	0x10e4	; 0x10e4 <DIO_u8SetPortValue>

	/*Send Enable Pulse*/
		DIO_enuSetPin(DIO_enuPin7);
    14ee:	87 e0       	ldi	r24, 0x07	; 7
    14f0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_enuSetPin>
		Delay_ms(2);
    14f4:	62 e0       	ldi	r22, 0x02	; 2
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>
	/*Send Disable Pulse After 2 mile second*/
		DIO_enuClearPin(DIO_enuPin7);
    1500:	87 e0       	ldi	r24, 0x07	; 7
    1502:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_enuClearPin>

	return LCD_enuOK;
    1506:	80 e0       	ldi	r24, 0x00	; 0

}
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <LCD_enuWriteString>:

LCD_tenuErrorStatus LCD_enuWriteString(const char* Copy_pcString){
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <LCD_enuWriteString+0x6>
    1516:	0f 92       	push	r0
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	9b 83       	std	Y+3, r25	; 0x03
    151e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1520:	19 82       	std	Y+1, r1	; 0x01
    1522:	0e c0       	rjmp	.+28     	; 0x1540 <LCD_enuWriteString+0x30>

	while(Copy_pcString[Local_u8Counter]!= '\0'){
		LCD_enuSendData(Copy_pcString[Local_u8Counter]);
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	9b 81       	ldd	r25, Y+3	; 0x03
    152e:	fc 01       	movw	r30, r24
    1530:	e2 0f       	add	r30, r18
    1532:	f3 1f       	adc	r31, r19
    1534:	80 81       	ld	r24, Z
    1536:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_enuSendData>
		Local_u8Counter++;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	89 83       	std	Y+1, r24	; 0x01
}

LCD_tenuErrorStatus LCD_enuWriteString(const char* Copy_pcString){
	u8 Local_u8Counter=0;

	while(Copy_pcString[Local_u8Counter]!= '\0'){
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	9b 81       	ldd	r25, Y+3	; 0x03
    154a:	fc 01       	movw	r30, r24
    154c:	e2 0f       	add	r30, r18
    154e:	f3 1f       	adc	r31, r19
    1550:	80 81       	ld	r24, Z
    1552:	88 23       	and	r24, r24
    1554:	39 f7       	brne	.-50     	; 0x1524 <LCD_enuWriteString+0x14>
		LCD_enuSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}

	return LCD_enuOK;
    1556:	80 e0       	ldi	r24, 0x00	; 0
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <LCD_enuGOToXY>:


LCD_tenuErrorStatus LCD_enuGOToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <LCD_enuGOToXY+0x6>
    156a:	0f 92       	push	r0
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	8a 83       	std	Y+2, r24	; 0x02
    1572:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	88 23       	and	r24, r24
    1578:	19 f4       	brne	.+6      	; 0x1580 <LCD_enuGOToXY+0x1c>
	{
		/*Location is at first line*/
		Local_u8Address=Copy_u8YPos;
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	06 c0       	rjmp	.+12     	; 0x158c <LCD_enuGOToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	19 f4       	brne	.+6      	; 0x158c <LCD_enuGOToXY+0x28>
	{
		/*location is at second line */
		Local_u8Address=(Copy_u8YPos+0x40);
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	80 5c       	subi	r24, 0xC0	; 192
    158a:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM Address command then send the command */
	LCD_enuSendCommand(Local_u8Address+128);
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	80 58       	subi	r24, 0x80	; 128
    1590:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_enuSendCommand>

	return LCD_enuOK;
    1594:	80 e0       	ldi	r24, 0x00	; 0
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <LCD_enuWriteSpecialCharacter>:



LCD_tenuErrorStatus LCD_enuWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8BlockNum, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	27 97       	sbiw	r28, 0x07	; 7
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	9c 83       	std	Y+4, r25	; 0x04
    15b8:	8b 83       	std	Y+3, r24	; 0x03
    15ba:	6d 83       	std	Y+5, r22	; 0x05
    15bc:	4e 83       	std	Y+6, r20	; 0x06
    15be:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0, Local_u8Iterator;
    15c0:	1a 82       	std	Y+2, r1	; 0x02

	/*Calculate the CGRAM Address Whose Each Block is 8 Bytes*/
	Local_u8CGRAMAddress = (Copy_u8BlockNum*8);
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	88 2f       	mov	r24, r24
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM Address Command to LCD, With setting bit 6, clearing bit 7 */
	LCD_enuSendCommand(Local_u8CGRAMAddress+64);
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	80 5c       	subi	r24, 0xC0	; 192
    15da:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_enuSendCommand>

	/*Write the pattern in CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    15de:	19 82       	std	Y+1, r1	; 0x01
    15e0:	0e c0       	rjmp	.+28     	; 0x15fe <LCD_enuWriteSpecialCharacter+0x5c>
	{
		LCD_enuSendData(Copy_pu8Pattern[Local_u8Iterator]);
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	fc 01       	movw	r30, r24
    15ee:	e2 0f       	add	r30, r18
    15f0:	f3 1f       	adc	r31, r19
    15f2:	80 81       	ld	r24, Z
    15f4:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_enuSendData>

	/*Send CGRAM Address Command to LCD, With setting bit 6, clearing bit 7 */
	LCD_enuSendCommand(Local_u8CGRAMAddress+64);

	/*Write the pattern in CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	8f 5f       	subi	r24, 0xFF	; 255
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	88 30       	cpi	r24, 0x08	; 8
    1602:	78 f3       	brcs	.-34     	; 0x15e2 <LCD_enuWriteSpecialCharacter+0x40>
	{
		LCD_enuSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*Go Back the DDRAM to Display the Pattern*/
	LCD_enuGOToXY(Copy_u8XPos,Copy_u8YPos);
    1604:	8e 81       	ldd	r24, Y+6	; 0x06
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	0e 94 b2 0a 	call	0x1564	; 0x1564 <LCD_enuGOToXY>

	/*Display the pattern written in the CGRAM*/
	LCD_enuSendData(Copy_u8BlockNum);
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_enuSendData>

	return LCD_enuOK;
    1612:	80 e0       	ldi	r24, 0x00	; 0
}
    1614:	27 96       	adiw	r28, 0x07	; 7
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <LCD_voidWriteNumber>:



LCD_tenuErrorStatus LCD_voidWriteNumber(u32 Copy_u32Number)
{
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	28 97       	sbiw	r28, 0x08	; 8
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	6d 83       	std	Y+5, r22	; 0x05
    1644:	7e 83       	std	Y+6, r23	; 0x06
    1646:	8f 83       	std	Y+7, r24	; 0x07
    1648:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Reserved=1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a0 e0       	ldi	r26, 0x00	; 0
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	ab 83       	std	Y+3, r26	; 0x03
    1658:	bc 83       	std	Y+4, r27	; 0x04
    165a:	36 c0       	rjmp	.+108    	; 0x16c8 <LCD_voidWriteNumber+0xa2>

	while(Copy_u32Number!=0)
	{
		Local_u32Reserved=Local_u32Reserved*10 + Copy_u32Number%10;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	9a 81       	ldd	r25, Y+2	; 0x02
    1660:	ab 81       	ldd	r26, Y+3	; 0x03
    1662:	bc 81       	ldd	r27, Y+4	; 0x04
    1664:	2a e0       	ldi	r18, 0x0A	; 10
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__mulsi3>
    1674:	7b 01       	movw	r14, r22
    1676:	8c 01       	movw	r16, r24
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9e 81       	ldd	r25, Y+6	; 0x06
    167c:	af 81       	ldd	r26, Y+7	; 0x07
    167e:	b8 85       	ldd	r27, Y+8	; 0x08
    1680:	2a e0       	ldi	r18, 0x0A	; 10
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__udivmodsi4>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8e 0d       	add	r24, r14
    1696:	9f 1d       	adc	r25, r15
    1698:	a0 1f       	adc	r26, r16
    169a:	b1 1f       	adc	r27, r17
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	ab 83       	std	Y+3, r26	; 0x03
    16a2:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number/=10;
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	af 81       	ldd	r26, Y+7	; 0x07
    16aa:	b8 85       	ldd	r27, Y+8	; 0x08
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__udivmodsi4>
    16bc:	da 01       	movw	r26, r20
    16be:	c9 01       	movw	r24, r18
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	af 83       	std	Y+7, r26	; 0x07
    16c6:	b8 87       	std	Y+8, r27	; 0x08

LCD_tenuErrorStatus LCD_voidWriteNumber(u32 Copy_u32Number)
{
	u32 Local_u32Reserved=1;

	while(Copy_u32Number!=0)
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	af 81       	ldd	r26, Y+7	; 0x07
    16ce:	b8 85       	ldd	r27, Y+8	; 0x08
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	a1 05       	cpc	r26, r1
    16d4:	b1 05       	cpc	r27, r1
    16d6:	11 f6       	brne	.-124    	; 0x165c <LCD_voidWriteNumber+0x36>
		Local_u32Reserved=Local_u32Reserved*10 + Copy_u32Number%10;
		Copy_u32Number/=10;
	}
	do
	{
		LCD_enuSendData((Local_u32Reserved%10)+'0');
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	ab 81       	ldd	r26, Y+3	; 0x03
    16de:	bc 81       	ldd	r27, Y+4	; 0x04
    16e0:	2a e0       	ldi	r18, 0x0A	; 10
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__udivmodsi4>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	80 5d       	subi	r24, 0xD0	; 208
    16f6:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_enuSendData>
		Local_u32Reserved/=10;
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1700:	bc 81       	ldd	r27, Y+4	; 0x04
    1702:	2a e0       	ldi	r18, 0x0A	; 10
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__udivmodsi4>
    1712:	da 01       	movw	r26, r20
    1714:	c9 01       	movw	r24, r18
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	9a 83       	std	Y+2, r25	; 0x02
    171a:	ab 83       	std	Y+3, r26	; 0x03
    171c:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(Local_u32Reserved!=1);
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	ab 81       	ldd	r26, Y+3	; 0x03
    1724:	bc 81       	ldd	r27, Y+4	; 0x04
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	a1 05       	cpc	r26, r1
    172c:	b1 05       	cpc	r27, r1
    172e:	a1 f6       	brne	.-88     	; 0x16d8 <LCD_voidWriteNumber+0xb2>


	return LCD_enuOK;
    1730:	80 e0       	ldi	r24, 0x00	; 0
}
    1732:	28 96       	adiw	r28, 0x08	; 8
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	08 95       	ret

0000174c <PUSHBUTTON_enuIS_PRESSED>:
#include "Std_types.h"
#include "Bit_math.h"
#include "PUSHBUTTON.h"
#include "DIO.h"

PUSHBUTTON_tenuErrorStatus PUSHBUTTON_enuIS_PRESSED(DIO_tenuPins Cpy_u8PinNumber,u8* PUSHBUTTON_STATE){
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <PUSHBUTTON_enuIS_PRESSED+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <PUSHBUTTON_enuIS_PRESSED+0x8>
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	7b 83       	std	Y+3, r23	; 0x03
    175c:	6a 83       	std	Y+2, r22	; 0x02
	if(Cpy_u8PinNumber<0 || Cpy_u8PinNumber>31){
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	80 32       	cpi	r24, 0x20	; 32
    1762:	18 f0       	brcs	.+6      	; 0x176a <PUSHBUTTON_enuIS_PRESSED+0x1e>
			return PUSHBUTTON_enuNotOK;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	8c 83       	std	Y+4, r24	; 0x04
    1768:	07 c0       	rjmp	.+14     	; 0x1778 <PUSHBUTTON_enuIS_PRESSED+0x2c>
	}

	//DIO_tenuErrorStatus Loc_return_d =
			DIO_enuGetPin(Cpy_u8PinNumber,PUSHBUTTON_STATE);
    176a:	2a 81       	ldd	r18, Y+2	; 0x02
    176c:	3b 81       	ldd	r19, Y+3	; 0x03
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	b9 01       	movw	r22, r18
    1772:	0e 94 4e 09 	call	0x129c	; 0x129c <DIO_enuGetPin>
	return PUSHBUTTON_enuOK;
    1776:	1c 82       	std	Y+4, r1	; 0x04
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <main>:
	  0b10000,
	  0b10000
	};


void main(void){
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	2a 97       	sbiw	r28, 0x0a	; 10
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
DIO_enuInit();
    179c:	0e 94 03 06 	call	0xc06	; 0xc06 <DIO_enuInit>
LCD_vidInit();
    17a0:	0e 94 30 0a 	call	0x1460	; 0x1460 <LCD_vidInit>
//LCD_enuWriteSpecialCharacter(Lift_Goal,7,1,2);


//LCD_voidWriteNumber(857);

	u8 x=0;
    17a4:	1e 82       	std	Y+6, r1	; 0x06
	u8 y=0;
    17a6:	1d 82       	std	Y+5, r1	; 0x05
	u8 BUTTON_1=DIO_enuPin16;
    17a8:	80 e1       	ldi	r24, 0x10	; 16
    17aa:	8c 83       	std	Y+4, r24	; 0x04
	u8 BUTTON_2=DIO_enuPin17;
    17ac:	81 e1       	ldi	r24, 0x11	; 17
    17ae:	8b 83       	std	Y+3, r24	; 0x03
	u8 BUTTON_3=DIO_enuPin18;
    17b0:	82 e1       	ldi	r24, 0x12	; 18
    17b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 BUTTON_4=DIO_enuPin19;
    17b4:	83 e1       	ldi	r24, 0x13	; 19
    17b6:	89 83       	std	Y+1, r24	; 0x01
	u8 BUTTON1_STATE;
	u8 BUTTON2_STATE;
	u8 BUTTON3_STATE;
	u8 BUTTON4_STATE;

	LCD_enuSendCommand(CLEAR_DISPLAY_COMMAND);
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_enuSendCommand>
	LCD_enuWriteSpecialCharacter(My_Arabic_Name1,0,x,y+3);
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	28 2f       	mov	r18, r24
    17c2:	2d 5f       	subi	r18, 0xFD	; 253
    17c4:	80 e7       	ldi	r24, 0x70	; 112
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	4e 81       	ldd	r20, Y+6	; 0x06
    17cc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
	LCD_enuWriteSpecialCharacter(My_Arabic_Name2,1,x,y+2);
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	28 2f       	mov	r18, r24
    17d4:	2e 5f       	subi	r18, 0xFE	; 254
    17d6:	88 e7       	ldi	r24, 0x78	; 120
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	61 e0       	ldi	r22, 0x01	; 1
    17dc:	4e 81       	ldd	r20, Y+6	; 0x06
    17de:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
	LCD_enuWriteSpecialCharacter(My_Arabic_Name3,2,x,y+1);
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	28 2f       	mov	r18, r24
    17e6:	2f 5f       	subi	r18, 0xFF	; 255
    17e8:	80 e8       	ldi	r24, 0x80	; 128
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	62 e0       	ldi	r22, 0x02	; 2
    17ee:	4e 81       	ldd	r20, Y+6	; 0x06
    17f0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
	LCD_enuWriteSpecialCharacter(My_Arabic_Name4,3,x,y);
    17f4:	88 e8       	ldi	r24, 0x88	; 136
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	63 e0       	ldi	r22, 0x03	; 3
    17fa:	4e 81       	ldd	r20, Y+6	; 0x06
    17fc:	2d 81       	ldd	r18, Y+5	; 0x05
    17fe:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
	Delay_ms(700);
    1802:	6c eb       	ldi	r22, 0xBC	; 188
    1804:	72 e0       	ldi	r23, 0x02	; 2
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>


while(1){

	// RIGHT
	Delay_ms(20);
    180e:	64 e1       	ldi	r22, 0x14	; 20
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>
	 PUSHBUTTON_enuIS_PRESSED(BUTTON_1,&BUTTON1_STATE);
    181a:	9e 01       	movw	r18, r28
    181c:	29 5f       	subi	r18, 0xF9	; 249
    181e:	3f 4f       	sbci	r19, 0xFF	; 255
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	b9 01       	movw	r22, r18
    1824:	0e 94 a6 0b 	call	0x174c	; 0x174c <PUSHBUTTON_enuIS_PRESSED>
	  if(BUTTON1_STATE == 0){
    1828:	8f 81       	ldd	r24, Y+7	; 0x07
    182a:	88 23       	and	r24, r24
    182c:	89 f5       	brne	.+98     	; 0x1890 <main+0x108>
	        if(y<12){
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	8c 30       	cpi	r24, 0x0C	; 12
    1832:	70 f5       	brcc	.+92     	; 0x1890 <main+0x108>
				y+=2;
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	8e 5f       	subi	r24, 0xFE	; 254
    1838:	8d 83       	std	Y+5, r24	; 0x05
				LCD_enuSendCommand(CLEAR_DISPLAY_COMMAND);
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_enuSendCommand>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name1,0,x,y+3);
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	28 2f       	mov	r18, r24
    1844:	2d 5f       	subi	r18, 0xFD	; 253
    1846:	80 e7       	ldi	r24, 0x70	; 112
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	4e 81       	ldd	r20, Y+6	; 0x06
    184e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name2,1,x,y+2);
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	28 2f       	mov	r18, r24
    1856:	2e 5f       	subi	r18, 0xFE	; 254
    1858:	88 e7       	ldi	r24, 0x78	; 120
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	61 e0       	ldi	r22, 0x01	; 1
    185e:	4e 81       	ldd	r20, Y+6	; 0x06
    1860:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name3,2,x,y+1);
    1864:	8d 81       	ldd	r24, Y+5	; 0x05
    1866:	28 2f       	mov	r18, r24
    1868:	2f 5f       	subi	r18, 0xFF	; 255
    186a:	80 e8       	ldi	r24, 0x80	; 128
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	62 e0       	ldi	r22, 0x02	; 2
    1870:	4e 81       	ldd	r20, Y+6	; 0x06
    1872:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name4,3,x,y);
    1876:	88 e8       	ldi	r24, 0x88	; 136
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	63 e0       	ldi	r22, 0x03	; 3
    187c:	4e 81       	ldd	r20, Y+6	; 0x06
    187e:	2d 81       	ldd	r18, Y+5	; 0x05
    1880:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				Delay_ms(100);
    1884:	64 e6       	ldi	r22, 0x64	; 100
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>
		{
			//Do Nothing
		}

	  // LEFT
	 Delay_ms(20);
    1890:	64 e1       	ldi	r22, 0x14	; 20
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>
	 PUSHBUTTON_enuIS_PRESSED(BUTTON_2,&BUTTON2_STATE);
    189c:	9e 01       	movw	r18, r28
    189e:	28 5f       	subi	r18, 0xF8	; 248
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	b9 01       	movw	r22, r18
    18a6:	0e 94 a6 0b 	call	0x174c	; 0x174c <PUSHBUTTON_enuIS_PRESSED>
		if(BUTTON2_STATE == 0)
    18aa:	88 85       	ldd	r24, Y+8	; 0x08
    18ac:	88 23       	and	r24, r24
    18ae:	a9 f5       	brne	.+106    	; 0x191a <main+0x192>
		{
			 if((y+2)>2)
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 96       	adiw	r24, 0x02	; 2
    18b8:	83 30       	cpi	r24, 0x03	; 3
    18ba:	91 05       	cpc	r25, r1
    18bc:	74 f1       	brlt	.+92     	; 0x191a <main+0x192>
			 {
				y=y-2;
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	82 50       	subi	r24, 0x02	; 2
    18c2:	8d 83       	std	Y+5, r24	; 0x05
				LCD_enuSendCommand(CLEAR_DISPLAY_COMMAND);
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_enuSendCommand>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name1,0,x,y+3);
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	28 2f       	mov	r18, r24
    18ce:	2d 5f       	subi	r18, 0xFD	; 253
    18d0:	80 e7       	ldi	r24, 0x70	; 112
    18d2:	91 e0       	ldi	r25, 0x01	; 1
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	4e 81       	ldd	r20, Y+6	; 0x06
    18d8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name2,1,x,y+2);
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	28 2f       	mov	r18, r24
    18e0:	2e 5f       	subi	r18, 0xFE	; 254
    18e2:	88 e7       	ldi	r24, 0x78	; 120
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	4e 81       	ldd	r20, Y+6	; 0x06
    18ea:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name3,2,x,y+1);
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	28 2f       	mov	r18, r24
    18f2:	2f 5f       	subi	r18, 0xFF	; 255
    18f4:	80 e8       	ldi	r24, 0x80	; 128
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	62 e0       	ldi	r22, 0x02	; 2
    18fa:	4e 81       	ldd	r20, Y+6	; 0x06
    18fc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name4,3,x,y);
    1900:	88 e8       	ldi	r24, 0x88	; 136
    1902:	91 e0       	ldi	r25, 0x01	; 1
    1904:	63 e0       	ldi	r22, 0x03	; 3
    1906:	4e 81       	ldd	r20, Y+6	; 0x06
    1908:	2d 81       	ldd	r18, Y+5	; 0x05
    190a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				Delay_ms(100);
    190e:	64 e6       	ldi	r22, 0x64	; 100
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>
		}



		// UP
		Delay_ms(20);
    191a:	64 e1       	ldi	r22, 0x14	; 20
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>
		 PUSHBUTTON_enuIS_PRESSED(BUTTON_3,&BUTTON3_STATE);
    1926:	9e 01       	movw	r18, r28
    1928:	27 5f       	subi	r18, 0xF7	; 247
    192a:	3f 4f       	sbci	r19, 0xFF	; 255
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	b9 01       	movw	r22, r18
    1930:	0e 94 a6 0b 	call	0x174c	; 0x174c <PUSHBUTTON_enuIS_PRESSED>
		if(BUTTON3_STATE == 0)
    1934:	89 85       	ldd	r24, Y+9	; 0x09
    1936:	88 23       	and	r24, r24
    1938:	89 f5       	brne	.+98     	; 0x199c <main+0x214>
		{
			if(x>0)
    193a:	8e 81       	ldd	r24, Y+6	; 0x06
    193c:	88 23       	and	r24, r24
    193e:	71 f1       	breq	.+92     	; 0x199c <main+0x214>
			{
				x--;
    1940:	8e 81       	ldd	r24, Y+6	; 0x06
    1942:	81 50       	subi	r24, 0x01	; 1
    1944:	8e 83       	std	Y+6, r24	; 0x06
				LCD_enuSendCommand(CLEAR_DISPLAY_COMMAND);
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_enuSendCommand>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name1,0,x,y+3);
    194c:	8d 81       	ldd	r24, Y+5	; 0x05
    194e:	28 2f       	mov	r18, r24
    1950:	2d 5f       	subi	r18, 0xFD	; 253
    1952:	80 e7       	ldi	r24, 0x70	; 112
    1954:	91 e0       	ldi	r25, 0x01	; 1
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	4e 81       	ldd	r20, Y+6	; 0x06
    195a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name2,1,x,y+2);
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	28 2f       	mov	r18, r24
    1962:	2e 5f       	subi	r18, 0xFE	; 254
    1964:	88 e7       	ldi	r24, 0x78	; 120
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	4e 81       	ldd	r20, Y+6	; 0x06
    196c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name3,2,x,y+1);
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	28 2f       	mov	r18, r24
    1974:	2f 5f       	subi	r18, 0xFF	; 255
    1976:	80 e8       	ldi	r24, 0x80	; 128
    1978:	91 e0       	ldi	r25, 0x01	; 1
    197a:	62 e0       	ldi	r22, 0x02	; 2
    197c:	4e 81       	ldd	r20, Y+6	; 0x06
    197e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name4,3,x,y);
    1982:	88 e8       	ldi	r24, 0x88	; 136
    1984:	91 e0       	ldi	r25, 0x01	; 1
    1986:	63 e0       	ldi	r22, 0x03	; 3
    1988:	4e 81       	ldd	r20, Y+6	; 0x06
    198a:	2d 81       	ldd	r18, Y+5	; 0x05
    198c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				Delay_ms(100);
    1990:	64 e6       	ldi	r22, 0x64	; 100
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>
			//Do Nothing
		}

		// DOWN

		Delay_ms(20);
    199c:	64 e1       	ldi	r22, 0x14	; 20
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>
		PUSHBUTTON_enuIS_PRESSED(BUTTON_4,&BUTTON4_STATE);
    19a8:	9e 01       	movw	r18, r28
    19aa:	26 5f       	subi	r18, 0xF6	; 246
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	b9 01       	movw	r22, r18
    19b2:	0e 94 a6 0b 	call	0x174c	; 0x174c <PUSHBUTTON_enuIS_PRESSED>


		if(BUTTON4_STATE == 0)
    19b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    19b8:	88 23       	and	r24, r24
    19ba:	09 f0       	breq	.+2      	; 0x19be <main+0x236>
    19bc:	28 cf       	rjmp	.-432    	; 0x180e <main+0x86>
		{
			if(x<1)
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	88 23       	and	r24, r24
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <main+0x23e>
    19c4:	24 cf       	rjmp	.-440    	; 0x180e <main+0x86>
			{
				x++;
    19c6:	8e 81       	ldd	r24, Y+6	; 0x06
    19c8:	8f 5f       	subi	r24, 0xFF	; 255
    19ca:	8e 83       	std	Y+6, r24	; 0x06
				LCD_enuSendCommand(CLEAR_DISPLAY_COMMAND);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_enuSendCommand>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name1,0,x,y+3);
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	28 2f       	mov	r18, r24
    19d6:	2d 5f       	subi	r18, 0xFD	; 253
    19d8:	80 e7       	ldi	r24, 0x70	; 112
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	4e 81       	ldd	r20, Y+6	; 0x06
    19e0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name2,1,x,y+2);
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	28 2f       	mov	r18, r24
    19e8:	2e 5f       	subi	r18, 0xFE	; 254
    19ea:	88 e7       	ldi	r24, 0x78	; 120
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	4e 81       	ldd	r20, Y+6	; 0x06
    19f2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name3,2,x,y+1);
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	28 2f       	mov	r18, r24
    19fa:	2f 5f       	subi	r18, 0xFF	; 255
    19fc:	80 e8       	ldi	r24, 0x80	; 128
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	62 e0       	ldi	r22, 0x02	; 2
    1a02:	4e 81       	ldd	r20, Y+6	; 0x06
    1a04:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				LCD_enuWriteSpecialCharacter(My_Arabic_Name4,3,x,y);
    1a08:	88 e8       	ldi	r24, 0x88	; 136
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	63 e0       	ldi	r22, 0x03	; 3
    1a0e:	4e 81       	ldd	r20, Y+6	; 0x06
    1a10:	2d 81       	ldd	r18, Y+5	; 0x05
    1a12:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteSpecialCharacter>
				Delay_ms(100);
    1a16:	64 e6       	ldi	r22, 0x64	; 100
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <Delay_ms>
    1a22:	f5 ce       	rjmp	.-534    	; 0x180e <main+0x86>

00001a24 <__mulsi3>:
    1a24:	62 9f       	mul	r22, r18
    1a26:	d0 01       	movw	r26, r0
    1a28:	73 9f       	mul	r23, r19
    1a2a:	f0 01       	movw	r30, r0
    1a2c:	82 9f       	mul	r24, r18
    1a2e:	e0 0d       	add	r30, r0
    1a30:	f1 1d       	adc	r31, r1
    1a32:	64 9f       	mul	r22, r20
    1a34:	e0 0d       	add	r30, r0
    1a36:	f1 1d       	adc	r31, r1
    1a38:	92 9f       	mul	r25, r18
    1a3a:	f0 0d       	add	r31, r0
    1a3c:	83 9f       	mul	r24, r19
    1a3e:	f0 0d       	add	r31, r0
    1a40:	74 9f       	mul	r23, r20
    1a42:	f0 0d       	add	r31, r0
    1a44:	65 9f       	mul	r22, r21
    1a46:	f0 0d       	add	r31, r0
    1a48:	99 27       	eor	r25, r25
    1a4a:	72 9f       	mul	r23, r18
    1a4c:	b0 0d       	add	r27, r0
    1a4e:	e1 1d       	adc	r30, r1
    1a50:	f9 1f       	adc	r31, r25
    1a52:	63 9f       	mul	r22, r19
    1a54:	b0 0d       	add	r27, r0
    1a56:	e1 1d       	adc	r30, r1
    1a58:	f9 1f       	adc	r31, r25
    1a5a:	bd 01       	movw	r22, r26
    1a5c:	cf 01       	movw	r24, r30
    1a5e:	11 24       	eor	r1, r1
    1a60:	08 95       	ret

00001a62 <__udivmodsi4>:
    1a62:	a1 e2       	ldi	r26, 0x21	; 33
    1a64:	1a 2e       	mov	r1, r26
    1a66:	aa 1b       	sub	r26, r26
    1a68:	bb 1b       	sub	r27, r27
    1a6a:	fd 01       	movw	r30, r26
    1a6c:	0d c0       	rjmp	.+26     	; 0x1a88 <__udivmodsi4_ep>

00001a6e <__udivmodsi4_loop>:
    1a6e:	aa 1f       	adc	r26, r26
    1a70:	bb 1f       	adc	r27, r27
    1a72:	ee 1f       	adc	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	a2 17       	cp	r26, r18
    1a78:	b3 07       	cpc	r27, r19
    1a7a:	e4 07       	cpc	r30, r20
    1a7c:	f5 07       	cpc	r31, r21
    1a7e:	20 f0       	brcs	.+8      	; 0x1a88 <__udivmodsi4_ep>
    1a80:	a2 1b       	sub	r26, r18
    1a82:	b3 0b       	sbc	r27, r19
    1a84:	e4 0b       	sbc	r30, r20
    1a86:	f5 0b       	sbc	r31, r21

00001a88 <__udivmodsi4_ep>:
    1a88:	66 1f       	adc	r22, r22
    1a8a:	77 1f       	adc	r23, r23
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	1a 94       	dec	r1
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <__udivmodsi4_loop>
    1a94:	60 95       	com	r22
    1a96:	70 95       	com	r23
    1a98:	80 95       	com	r24
    1a9a:	90 95       	com	r25
    1a9c:	9b 01       	movw	r18, r22
    1a9e:	ac 01       	movw	r20, r24
    1aa0:	bd 01       	movw	r22, r26
    1aa2:	cf 01       	movw	r24, r30
    1aa4:	08 95       	ret

00001aa6 <__prologue_saves__>:
    1aa6:	2f 92       	push	r2
    1aa8:	3f 92       	push	r3
    1aaa:	4f 92       	push	r4
    1aac:	5f 92       	push	r5
    1aae:	6f 92       	push	r6
    1ab0:	7f 92       	push	r7
    1ab2:	8f 92       	push	r8
    1ab4:	9f 92       	push	r9
    1ab6:	af 92       	push	r10
    1ab8:	bf 92       	push	r11
    1aba:	cf 92       	push	r12
    1abc:	df 92       	push	r13
    1abe:	ef 92       	push	r14
    1ac0:	ff 92       	push	r15
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	ca 1b       	sub	r28, r26
    1ad0:	db 0b       	sbc	r29, r27
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	09 94       	ijmp

00001ade <__epilogue_restores__>:
    1ade:	2a 88       	ldd	r2, Y+18	; 0x12
    1ae0:	39 88       	ldd	r3, Y+17	; 0x11
    1ae2:	48 88       	ldd	r4, Y+16	; 0x10
    1ae4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ae6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ae8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aea:	8c 84       	ldd	r8, Y+12	; 0x0c
    1aec:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aee:	aa 84       	ldd	r10, Y+10	; 0x0a
    1af0:	b9 84       	ldd	r11, Y+9	; 0x09
    1af2:	c8 84       	ldd	r12, Y+8	; 0x08
    1af4:	df 80       	ldd	r13, Y+7	; 0x07
    1af6:	ee 80       	ldd	r14, Y+6	; 0x06
    1af8:	fd 80       	ldd	r15, Y+5	; 0x05
    1afa:	0c 81       	ldd	r16, Y+4	; 0x04
    1afc:	1b 81       	ldd	r17, Y+3	; 0x03
    1afe:	aa 81       	ldd	r26, Y+2	; 0x02
    1b00:	b9 81       	ldd	r27, Y+1	; 0x01
    1b02:	ce 0f       	add	r28, r30
    1b04:	d1 1d       	adc	r29, r1
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	ed 01       	movw	r28, r26
    1b12:	08 95       	ret

00001b14 <_exit>:
    1b14:	f8 94       	cli

00001b16 <__stop_program>:
    1b16:	ff cf       	rjmp	.-2      	; 0x1b16 <__stop_program>
